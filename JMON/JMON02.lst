0001   0000             ;
0002   0000             ; JMON - JIM'S MONITOR
0003   0000             ; BY JIM ROBERTSON
0004   0000             ;
0005   0000             ;
0006   0000             ; FILENAME : JMON_SRC_02.ASM
0007   0000             ; VERSION : 2
0008   0000             ;
0009   0000             ; VERSION 1
0010   0000             ; RESTORED TO SOURCE FROM PDF LISTING(S) FEBRUARY 2021 BY CRAIG JONES
0011   0000             ; 
0012   0000             ; THE PHOTOCOPIED PDF LISTING WAS CONVERTED TO A TEXT FILE VIA OCR
0013   0000             ; THE MISSING PAGE 9 WAS TAKEN FROM ANOTHER VERSION OF THE LISTING
0014   0000             ;
0015   0000             ; VERSION 2  SEPTEMBER 2021 BY CRAIG JONES
0016   0000             ; 
0017   0000             ; CORRECTED SOME FORMATTING ERRORS IDENTIFIED BY MARK JELIC
0018   0000             ; CONDITIONALLY ASSEMBLES FOR THE TEC-1F
0019   0000             ; REPLACED THE FUNCTION 1 AND SHIFT JUMP TABLE WITH SYMBOLS
0020   0000             ; ADDED COLONS TO THE LABELS
0021   0000             ; ASSEMBLES UNDER TASM 3.2
0022   0000             ;
0023   0000             ;.TITLE "JMON Monitor"
0024   0000             ;.PAGE
0025   0000             ;.SYM "JMON02_Symbols.TXT"
0026   0000             ;
0027   0000             ;GLOSSARY
0028   0000             ;
0029   0000             ;CURRENT EDITING LOCATION (082E)
0030   0000             ;THIS IS THE ADDRESS THAT IS USUALLY DISPLAYED IN THE ADDRESS SECTION ON THE TEC LED 
0031   0000             ;DISPLAY. IT IS THE ADDRESS THAT IS SUBJECT TO MODIFICATION BY JMON.
0032   0000             ;
0033   0000             ;MONITOR CONTROL BYTE (MCB) (082B)
0034   0000             ;THIS BYTE CONTAINS THE INFORMATION OF THE CURRENT WORKING STATE OF JMON. THE INFORMATION 
0035   0000             ;HELD IN THIS BYTE IS:
0036   0000             ;1 - THE CURRENT MODE OF JMON.
0037   0000             ;E.G. DATA, ADDRESS OR FUNCTION (NOT SHIFT AS SHIFT IS TESTED AND HANDLED DURING THE DATA 
0038   0000             ;KEY HANDLER ROUTINE). BITS 4 AND 5 ENCODE THE CURRENT MODE IN THE FOLLOWING WAY. BOTH 
0039   0000             ;BITS ARE LOW FOR THE DATA MODE, BIT 4 IS HIGH FOR THE ADDRESS MODE, BITS 4 AND 5 ARE HIGH 
0040   0000             ;FOR THE FUNCTION MODE. BIT 4 IS CALLED THE ADDRESS/FUNCTION BIT AS THE SOFTWARE ONLY 
0041   0000             ;NEEDS TO TEST THIS BIT TO FIND IF EITHER THE ADDRESS OR FUNCTION MODE IS ACTIVE. BIT 5 
0042   0000             ;IS THE FUNCTION MODE ENABLED BIT.
0043   0000             ;2 - THE NUMBER OF THE CURRENT FUNCTION I.E. 1,2 OR 3.
0044   0000             ;THIS IS ENCODED IN BITS 2 AND 3. IF NO FUNCTION OR FUNCTION-1 IS ENABLED THEN BOTH BITS 
0045   0000             ;ARE LOW. IF FUNCTION-2 IS SELECTED THEN BIT 2 IS HIGH AND BIT 3 IS LOW. IF FUNCTION-3 IS 
0046   0000             ;SELECTED THEN BIT 3 IS HIGH AND BIT 2 IS LOW.
0047   0000             ;3 - THE NUMBER OF NIBBLES ENTERED
0048   0000             ;THIS IS ENCODED IN BITS 0 AND 1. IF NO NIBBLES HAVE BEEN ENTERED IN THE CURRENT EDITING 
0049   0000             ;LOCATION THEN BOTH BIT ARE LOW. IF ONE NIBBLE HAS BEEN ENTERED THEN BIT 0 IS HIGH AND 
0050   0000             ;BIT 1 IS LOW IS TWO NIBBLES HAVE BEEN ENTERED THEN BIT 0 IS LOW AND BIT 1 IS HIGH. JMON 
0051   0000             ;USES THESE BITS WHEN DECIDING ON THE AUTO-INCREMENT FEATURE. BITS 6 AND 7 ARE NOT USED.
0052   0000             ;
0053   0000             ;DISPLAY BUFFER ADDRESS - (082C/D)
0054   0000             ;THE CONTENTS OF 082C/D POINTS TO THE LOCATION IN MEMORY OF THE 6 BYTE DISPLAY BUFFER 
0055   0000             ;(0800 FOR JMON AND 0806 FOR THE STEPPER). THE DISPLAY BUFFER ADDRESS POINTS TO THE LOWEST 
0056   0000             ;ADDRESS OF THE DISPLAY BUFFER WHICH CONTAINS THE LOW ORDER DATA DISPLAY BYTE.
0057   0000             ;
0058   0000             ;KEY PLANT
0059   0000             ;THE KEY PLANT IS A FAKE KEY STROKE THAT MAY BE GENERATED BY THE "DURING SCAN/REY LOOP" 
0060   0000             ;USER PATCH. THE PLANT ALLOWS JMON'S MONITOR FUNCTIONS TO BE SOFTWARE CONTROLLED E.G. YOU 
0061   0000             ;MAY WISH TO VIEW THE CONTENTS ,OF MEMORY BYTE BY BYTE. WITH THE KEY PLANT YOU CAN SET JMON 
0062   0000             ;UP TO AUTOMATICALLY INCREMENT THE CURRENT EDIT LOCATION EVERY FEW SECONDS.
0063   0000             ;THE PLANT IS IDENTIFIED BY THE USER PATCH STORING THE REQUIRED KEY VALUE IN, AND SETTING 
0064   0000             ;BIT 7 OF THE INPUT KEY BUFFER (0820).
0065   0000             ;
0066   0000             ;AUTO KEY STATUS BYTE (082A)
0067   0000             ;THIS BYTE HOLDS THE INFORMATION REQUIRED FOR THE AUTO KEY REPEAT SECTION. THE INFORMATION 
0068   0000             ;HELD IN THIS BYTE IS EITHER ONE OF THE FOLLOWING:
0069   0000             ;A "NEXT KEY DETECTION WILL BE A FIRST DETECTION" SO JMON WILL PROCESS THE KEY IMMEDIATELY 
0070   0000             ;(BIT 7 HIGH) . A TIMER (BITS 0-6) THAT COUNTS, A DELAY FOR THE AUTO. REPEAT TIMING.
0071   0000             ;
0072   0000             ;KEY PRESS FLAG (0825)
0073   0000             ;THIS FLAG IS USED TO REMEMBER IF THE ONE KEY PRESS HAS ALREADY BEEN DETECTED AND PROCESSED. 
0074   0000             ;THIS PREVENTS THE SAME KEY BEING PROCESSED EACH TIME THE SOFTWARE FINDS THAT IT IS PUSHED. 
0075   0000             ;THIS IS THE WAY IT WORKS:
0076   0000             ;THE KEY PRESS FLAG 1S ZEROED BY THE JMON DEFAULT VARIABLES AND THIS FLAGS A "NO KEY 
0077   0000             ;PRESSED" STATE. WHEN A KEY IS DETECTED THEN THIS FLAG IS TESTED AND IF ZERO THEN THE KEY 
0078   0000             ;IS ACCEPTED AS A FIRST KEY PRESS. IN THIS CASE THE KEY PRESS FLAG IS THEN SET TO FF TO 
0079   0000             ;REMEMBER THAT THE KEY PRESS HAS BEEN DETECTED. IF A KEY IS DETECTED AND THIS FLAG BYTE 
0080   0000             ;IS NOT ZERO, THEN THE KEY IS IGNORED. WHEN THE SOFTWARE FINDS THAT NO KEY IS BEING PRESSED, 
0081   0000             ;THEN THIS FLAG IS CLEARED TO ALLOW THE NEXT KEY PRESS DETECTED TO BE PROCESSED.
0082   0000             ;THIS FLAG IS USED BY THE RST 08, RST 10 RST 18 AND RST 20 KEYBOARD ROUTINES AS DESCRIBED 
0083   0000             ;IN ISSUE 15 TALKING ELECTRONICS AND ALSO THE STEPPER SOFTWARE.
0084   0000             ;THE AUTO KEY REPEAT ROUTINE DOES NOT USE THIS FLAG BYTE, DO NOT CONFUSE THIS FLAG WITH 
0085   0000             ;THE AUTO KEY STATUS BYTE WHICH IS USED BY THE AUTO KEY REPEAT SECTION.
0086   0000             
0087   0000             ;TAPE FILE INFORMATION BLOCK
0088   0000             ;THIS IS A 12 BYTE BLOCK THAT CONTAINS THE FOLLOWING INFORMATION:
0089   0000             ;THE START ADDRESS OF THE BLOCK, THE NUMBER OF BYTES IN THE BLOCK, THE FILE NUMBER AND AN 
0090   0000             ;OPTIONAL GO ADDRESS OR FFFF IF OPTIONAL GO IS DISABLED. THE OTHER 4 BYTES ARE NOT USED 
0091   0000             ;AT THIS STAGE.
0092   0000             ;THIS BLOCK IS OUTPUTTED AND INPUTTED TO AND FROM THE TAPE ON EACH TAPE OPERATION.
0093   0000             ;
0094   0000             ;"NEXT PC" BUFFER
0095   0000             ;THIS IS A TEMPORARY PLACE TO SAVE THE RETURN ADDRESS WHICH IS THEN USED AS THE ACTUAL PC 
0096   0000             ;VALUE FOR THE NEXT INSTRUCTION STEPPED.
0097   0000             ;
0098   0000             ;FORCED HARD RESET
0099   0000             ;THIS IS ACHIEVED BY HOLDING DOWN A KEY WHEN RELEASING THE RESET. THE HARD RESET CAUSES 
0100   0000             ;JMON TO RE-BOOT ITS VARIABLES AND ALSO MASK OFF ALL THE USER PATCHES (EXCEPT THE RESET 
0101   0000             ;PATCH). THE MAIN PURPOSE OF A FORCED HARD RESET IS TO RECOVER THE TEC IF A USER PATCH 
0102   0000             ;ENTERS A CONTINUOUS LOOP.
0103   0000             ;
0104   0000             ;
0105   0000             ;
0106   0000             ;THE TEC-1F HAS THE INVERTED OUTPUT OF THE KEYBOARD DA AVAILABLE AT BIT POSITION 6 ON THE 
0107   0000             ;KEYBOARD BUFFER SO DOES NOT NEED THE JMON RESISTOR OR THE DAT BOARD TO BE PRESENT
0108   0000             #define TEC-1F
0109   0000             ;
0110   0000             ;
0111   0000             #ifdef  TEC-1F
0112   0000             .ECHO "Assembled for the TEC-1F\r\n"
0113   0000~            #else
0114   0000~            .ECHO "ASSEMBLED FOR THE TEC-1\r\n"
0115   0000             #endif
0116   0000             
0117   0000             ;
0118   0800                         .ORG   0800H
0119   0800             L0800       .BLOCK    4
0120   0804             L0804       .BLOCK    1
0121   0805             L0805       .BLOCK    1           ;KEY BUFFER
0122   0806             L0806       .BLOCK    26          ;DISPLAY BUFFER
0123   0820             L0820       .BLOCK    1
0124   0821             L0821       .BLOCK    1             ;LCD ON/OFF FLAG
0125   0822             L0822       .BLOCK    1             ;SOUND ON/OFF
0126   0823             L0823       .BLOCK    1             ;GO AT ALTERNATE GO ADDRESS IF AA
0127   0824             L0824       .BLOCK    1             ;STEPPER KEY CONTROL/TIMER
0128   0825             L0825       .BLOCK    1             ;KEY PRESS FLAG
0129   0826             L0826       .BLOCK    1             ;UNUSED 
0130   0827             L0827       .BLOCK    1             ;AUTO INCREMENT ON/OFF  
0131   0828             L0828       .BLOCK    2             ;ALT GO ADDR/SOFT RESET EDIT LOCATION
0132   082A             L082A       .BLOCK    1             ;AUTO KEY STATUS BYTE
0133   082B             L082B       .BLOCK    1             ;MONITOR CONTROL BYTE (MCB)
0134   082C             L082C       .BLOCK    2             ;DISPLAY BUFFER ADDRESS
0135   082E             L082E       .BLOCK    2             ;CURRENT EDITING LOCATION (CEL)
0136   0830             ;
0137   0830             ; JMON INDIRECT JUMP ADDRESSES - COPIED FROM L071F ON A HARD RESET
0138   0830             ;
0139   0830             L0830       .BLOCK    3             ;CONVERT HL TO DISPLAY CODE  (L01D5)
0140   0833             L0833       .BLOCK    3             ;CONVERT A TO DISPLAY CODE   (L01DA)
0141   0836             L0836       .BLOCK    3             ;LED SCAN ROUTINE    (L01BA)
0142   0839             L0839       .BLOCK    3             ;SET LED DOTS    (L01EE)
0143   083C             L083C       .BLOCK    3             ;RESET TONES   (L0224) 
0144   083F             L083F       .BLOCK    3             ;TONE   (L0227)
0145   0842             L0842       .BLOCK    3             ;SCAN/KEY/LCD/PATCH ROUTINE   (L0181)
0146   0845             L0845       .BLOCK    3             ;SOFT JMON ENTRY  (L00B2)
0147   0848             L0848       .BLOCK    3             ;LCD ROUTINE  (L023C)
0148   084B             
0149   084B             L084B       .BLOCK    3
0150   084E             L084E       .BLOCK    3
0151   0851             L0851       .BLOCK    7
0152   0858             L0858       .BLOCK    2             ;"NEXT PC" BUFFER   
0153   085A             L085A       .BLOCK    6
0154   0860             
0155   0860             L0860       .BLOCK    8
0156   0868             L0868       .BLOCK    2
0157   086A             L086A       .BLOCK    4
0158   086E             L086E       .BLOCK    2
0159   0870             ;
0160   0870             ; STEPPER ROUTINE
0161   0870             ;
0162   0870             L0870       .BLOCK    14             ; STEPPER SAVED REGISTERS - HL REG
0163   087E             
0164   087E             L087E       .BLOCK    2
0165   0880             L0880       .BLOCK    2
0166   0882             L0882       .BLOCK    2
0167   0884             L0884       .BLOCK    2
0168   0886             L0886       .BLOCK    1
0169   0887             L0887       .BLOCK    1
0170   0888             L0888       .BLOCK    2
0171   088A             L088A       .BLOCK    2
0172   088C             L088C       .BLOCK    3
0173   088F             L088F       .BLOCK    2
0174   0891             
0175   0891             L0891       .BLOCK    2
0176   0893             L0893       .BLOCK    2
0177   0895             L0895       .BLOCK    2
0178   0897             L0897       .BLOCK    1
0179   0898             L0898       .BLOCK    2
0180   089A             L089A       .BLOCK    2
0181   089C             L089C       .BLOCK    2
0182   089E             L089E       .BLOCK    6
0183   08A4             
0184   08A4             L08A4       .BLOCK    2
0185   08A6             L08A6       .BLOCK    2
0186   08A8             L08A8       .BLOCK    2
0187   08AA             L08AA       .BLOCK    6
0188   08B0             
0189   08B0             L08B0       .BLOCK    1 
0190   08B1             L08B1       .BLOCK    2
0191   08B3             L08B3       .BLOCK    2
0192   08B5             L08B5       .BLOCK    1
0193   08B6             L08B6       .BLOCK    2
0194   08B8             UNUSED      .BLOCK    8
0195   08C0             L08C0       .BLOCK    2
0196   08C2             L08BE       .BLOCK    2
0197   08C4             
0198   08C4             L08FF:   .EQU  08FFH
0199   08C4             L0900:   .EQU  0900H
0200   08C4             L3800:   .EQU  3800H                      ;LCD ROUTINES
0201   08C4             L3820:   .EQU  3820H
0202   08C4             ;
0203   08C4             ; IO ASSIGNMENTS
0204   08C4             ;
0205   08C4             KEYBOARD .EQU $00      ;KEYBOARD ENCODER
0206   08C4             DSCAN    .EQU $01      ;DISPLAY CATHODE DRIVER LATCH
0207   08C4             DSEGMENT .EQU $02      ;DISPLAY SEGMENT DRIVER LATCH
0208   08C4             
0209   08C4             ;DAT BOARD
0210   08C4             #ifdef   TEC-1F
0211   08C4             DATLATCH .EQU $00      ;DA IS AVIALABLE ON THE TEC-1F KEYBOARD BUFFER
0212   08C4~            #else
0213   08C4~            DATLATCH .EQU $03      ;DAT BOARD LATCH
0214   08C4             #endif
0215   08C4             LCDDATA  .EQU $84      ;LCD DATA REGISTER
0216   08C4             LCDINST  .EQU $04      ;LCD INSTRUCTION REGISTER
0217   08C4             
0218   08C4             ;
0219   08C4             ;                                  CORRECTED 2/11/1989
0220   08C4             ;
0221   08C4             ;AT THE START OF JMON, HL IS SAVED IN ITS SINGLE STEPPER BUFFER ADD THE SOFT RESET DISPLAY 
0222   08C4             ;VALUE IS PLACED IN THE CURRENT EDIT LOCATION BUFFER. THE ROUTINE THEN IS CONTINUED AT 
0223   08C4             ;0068.
0224   0000                    .ORG  0000H
0225   0000 22 6E 08           LD (L086E),HL   ;SAVE HL PART OF REGISTER SAVE
0226   0003 2A 28 08           LD HL,(L0828)   ;GET SOFT RESET INITIAL EDIT
0227   0006 18 63              JR L006B        ;LOCATION AND CONTINUE AT 006B
0228   0008             
0229   0008             ;RST 08 AND RST 10 (CF AND D7)
0230   0008             ;THESE TWO COMBINE TOGETHER TO SIMULATE A HALT INSTRUCTION. THIS IS DONE BY LOOPING UNTIL 
0231   0008             ;THE CURRENT (IF ANY) KEY PRESS IS RELEASED (RST 08), AND THEN LOOPING UNTIL A NEW KEY
0232   0008             ;PRESS IS DETECTED (RST 10).
0233   0008             
0234   0008 E7          L0008:  RST 20H         ;TEST FOR KEY PRESS
0235   0009 28 FD              JR Z,L0008      ;LOOP IF KEY PRESSED
0236   000B 00                 NOP             ;ELSE
0237   000C 00                 NOP             ;MOVE
0238   000D 00                 NOP             ;TO
0239   000E 00                 NOP             ;NEXT
0240   000F 00                 NOP             ;RST
0241   0010 E7          L0010:  RST 20H         ;TEST FOR KEY AGAIN
0242   0011 20 FD              JR NZ,L0010     ;LOOP IF KEY NOT PRESSED
0243   0013 E6 1F              AND $1F        ;MASK OF JUNK BITS
0244   0015 ED 47              LD I,A          ;STORE IN INTERRUPT REGISTER
0245   0017 C9                 RET             ;DONE
0246   0018             
0247   0018             ;RST 18  (DF)AND RST (20)
0248   0018             ;RST 18 CALLS THE LED SCAN ROUTINE ONCE THEN MOVES ON INTO RST 20 THAT THEN CALLS A KEYBOARD
0249   0018             ;READ ROUTINE.
0250   0018             ;THE KEYBOARD MUST BE READ CONTINUOUSLY OVER A PERIOD OF TIME, AS THE DATA  AVAILABLE SIGNAL 
0251   0018             ;(BIT 6, PORT 3) (USUALLY) PULSES, WHEN A KEY IS PRESSED, IN TIME WITH THE KEY ENCODER 
0252   0018             ;CHIP'S SCANNING. IF THE KEY BOARD IS READ ONLY ONCE EVERY SECOND, THEN THE SOFTWARE MAY
0253   0018             ;AND PROBABLY) WILL TARE SEVERAL SECONDS TO DETECT THE KEY. 
0254   0018             ;THE NUMBER OF READ CYCLES FOR THE KEYBOARD IS LOADED INTO B.
0255   0018             
0256   0018 E5                 PUSH HL         ;SAVE HL
0257   0019 D5                 PUSH DE         ;AND DE
0258   001A CD 36 08           CALL L0836      ;CALL SCAN ROUTINE
0259   001D D1                 POP DE          ;RECOVER DE
0260   001E E1                 POP HL          ;AND HL
0261   001F 00                 NOP             ;NEXT RST
0262   0020 C5                 PUSH BC         ;SAVE BC
0263   0021 06 20              LD B,$20       ;B = NUMBER OF KEYBOARD SCAN LOOPS
0264   0023 CD AD 06           CALL L06AD      ;CALL KEY READER/VALIDATER
0265   0026 C1                 POP BC          ;RECOVER BC
0266   0027 C9                 RET             ;DONE
0267   0028             
0268   0028             ;RST 28 (EF)
0269   0028             ;START STEPPING FROM THE INSTRUCTION FOLLOWING THE RST 28
0270   0028             
0271   0028 E3                 EX (SP),HL      ;GET RETURN ADDRESS FROM THE STACK 
0272   0029 22 58 08           LD (L0858),HL   ;PUT IN "NEXT PC" BUFFER
0273   002C E3                 EX (SP),HL      ;FIX UP STACK
0274   002D FB                 EI              ;ENABLE INTERRUPTS
0275   002E C9                 RET             ;STEPPING WILL OCCUR AFTER RETURN 
0276   002F FF                 RST 38H         ;SPARE
0277   0030             
0278   0030             ;RST 30 (F7)
0279   0030             ;TEST THE BUSY STATE OF THE LCD AND LOOP WHILE BUSY
0280   0030             
0281   0030 DB 04       L0030:  IN A,(LCDINST)  ;READ STATUS BIT FROM LCD 
0282   0032 07                 RLCA            ;PUT IN CARRY
0283   0033 38 FB              JR C,L0030      ;LOOP IF LCD BUSY
0284   0035 C9                 RET             ;DONE
0285   0036 FF                 RST 38H
0286   0037 FF                 RST 38H
0287   0038             
0288   0038             ;RST 38 (FF) 
0289   0038             ;INTERRUPT HANDLER  FOR STEPPER AND BREAK-POINTS
0290   0038             
0291   0038 C3 12 03           JP L0312        ;JUMP TO STEPPER ROUTINE 
0292   003B FF                 RST 38H         ;UNUSED
0293   003C FF                 RST 38H         ;"   "
0294   003D FF                 RST 38H         ;"   "
0295   003E FF                 RST 38H         ;"   "
0296   003F FF                 RST 38H         ;"   "
0297   0040 FF                 RST 38H         ;"   "
0298   0041             
0299   0041             ;JUMP TABLE FOR EXTERNAL SOFTWARE TO USE JMON ROUTINES
0300   0041             
0301   0041             
0302   0041 C3 DD 03           JP L03DD        ;MENU GATE
0303   0044 C3 79 04           JP L0479        ;PERIMETER HANDLER ENTRY
0304   0047 C3 ED 03    L0047:  JP L03ED        ;SOFT MENU ENTRY
0305   004A C3 9F 06    L004A:  JP L069F        ;ERR-IN ENTRY
0306   004D C3 B4 05           JP L05B4        ;PASS/FAIL/MENU
0307   0050 C3 A3 04    L0050:  JP L04A3        ;SOFT PERIMETER HANDLER ENTRY
0308   0053 FF                 RST 38H          ;RESERVED
0309   0054 FF                 RST 38H          ;"   "
0310   0055 FF                 RST 38H          ;"   "
0311   0056 FF                 RST 38H          ;"   "
0312   0057 FF                 RST 38H          ;"   "
0313   0058 FF                 RST 38H          ;"   "
0314   0059 FF                 RST 38H          ;"   "
0315   005A FF                 RST 38H          ;"   "
0316   005B FF                 RST 38H          ;"   "
0317   005C FF                 RST 38H          ;"   "
0318   005D FF                 RST 38H          ;"   "
0319   005E             
0320   005E             ;SHIFT-2 ROUTINE
0321   005E             ;THIS STORES THE CURRENT EDIT LOCATION IN THE "NEXT PC" BUFFER. THE INTERRUPTS ARE THEN 
0322   005E             ;ENABLED AND THE PROGRAM JUMPS TO THE USER ROUTINE TO BE STEPPED. STEPPING OCCURS AT THE 
0323   005E             ;CURRENT EDIT LOCATION (CEL).
0324   005E             
0325   005E 2A 2E 08    L005E:  LD HL,(L082E)   ;PUT CURRENT EDIT LOCATION IN
0326   0061 22 58 08           LD (L0858),HL   ;"NEXT PC" BUFFER
0327   0064 FB                 EI              ;ENABLE INTERRUPTS
0328   0065 E9                 JP (HL)         ;START STEPPING
0329   0066             
0330   0066             ;NMI HANDLER (IMMEDIATE RETURN)
0331   0066             
0332   0066 ED 45              RETN            ;IGNORE NMI
0333   0068 FF                 RST 38H         ;RESERVED
0334   0069 FF                 RST 38H         ;FOR
0335   006A FF                 RST 38H         ;A JUMP
0336   006B             
0337   006B             ;CONTINUATION OF MONITOR
0338   006B             
0339   006B ED 56       L006B:  IM 1            ;SET INTERRUPT MODE 1 FOR STEPPER
0340   006D 22 2E 08           LD (L082E),HL   ;STORE SOFT RESET INITIAL CEL
0341   0070 21 76 00           LD HL,L0076     ;LOAD HL WITH RE-ENTRY ADDRESS
0342   0073 C3 18 03           JP L0318        ;JUMP TO SAVE REGISTERS
0343   0076             
0344   0076             
0345   0076             ;RE-ENTRY POINT AFTER SAVING REGISTERS
0346   0076             
0347   0076 31 20 08    L0076:  LD SP,L0820     ;SET STACK
0348   0079 CD F7 02           CALL L02F7      ;CALL RESET PATCH HANDLER 
0349   007C E7                 RST 20H         ;LOOK FOR FORCED HARD RESET
0350   007D 28 07              JR Z,L0086      ;JUMP KEY PRESSED TO HARD RESET 
0351   007F 3A FF 08           LD A,(L08FF)    ;CHECK HARD/RESET FLAG
0352   0082 FE AA              CP $AA         ;FOR AA
0353   0084 28 1C              JR Z,L00A2      ;JUMP TO SOFT RESET IF AA
0354   0086             
0355   0086             ;HARD RESET
0356   0086             ;MONITOR DEFAULT VARIABLES ARE RE-BOOTED AND USER PATCHES MASKED OFF.
0357   0086             
0358   0086 21 0F 07    L0086:  LD HL,L070F     ;LOAD HL WITH START OF JMON DEFAULT
0359   0089 11 20 08           LD DE,L0820     ;VARIABLES ROM TABLE
0360   008C 01 2B 00           LD BC,$002B    ;DE IS THE RAM DE(stination)
0361   008F ED B0              LDIR            ;AND BC THE COUNT: MOVE TABLE
0362   0091 06 03              LD B,$03       ;MASK OF THE THREE USER PATCHES
0363   0093 3E C9              LD A,$C9       ;BY PUTTING A RETurn AT THE FIRST
0364   0095 12          L0095:  LD  (DE),A      ;LOCATION OF EACH
0365   0096 13                 INC DE          ;
0366   0097 13                 INC DE          ;
0367   0098 13                 INC DE          ;
0368   0099 10 FA              DJNZ L0095      ;
0369   009B CD D5 06           CALL L06D5      ;INITIALIZE/TEST FOR THE LCD
0370   009E AF                 XOR A           ;CLEAR HARD/SOFT
0371   009F 32 FF 08           LD  (L08FF),A   ;RESET FLAG
0372   00A2             
0373   00A2             ;THIS SECTION IS THE SOFT RESET SECTION. IT IS ALSO PART OF THE HARD RESET SECTION.
0374   00A2             
0375   00A2 21 00 38    L00A2:  LD HL,L3800     ;TEST FOR JMON UTILITIES ROM
0376   00A5 7E                 LD A, (HL) 
0377   00A6 FE C3              CP $C3         ;AND CALL ITS RESET ROUTINE
0378   00A8 CC 00 38           CALL Z,L3800    ;IF REQUIRED
0379   00AB CD 3C 08           CALL L083C      ;CALL RESET TONE ROUTINE
0380   00AE AF          L00AE:  XOR A           ;CLEAR MONITOR CONTROL BYTE
0381   00AF 32 2B 08           LD (L082B),A    ;0 = DATA MODE, NO NIBBLES ENTERED
0382   00B2             
0383   00B2             ;EACH TIME A KEYBOARD INPUT OR USER PATCH "PLANT", IS PROCESSED, THE PROGRAM JUMPS BACK 
0384   00B2             ;TO HERE SO THE DISPLAYS MAY BE UP-DATED.
0385   00B2             
0386   00B2 2A 2E 08    L00B2:  LD HL, (L082E)  ;GET CURRENT EDIT LOCATION (CEL) 
0387   00B5 ED 4B 2C 08        LD BC,(L082C)   ;AND DISPLAY BUFFER ADDRESS
0388   00B9 CD 30 08           CALL L0830      ;AND CONVERT CEL TO DISPLAY CODE 
0389   00BC 7E                 LD A, (HL)      ;AND THEN CONVERT CONTENTS OF 
0390   00BD CD 33 08           CALL L0833      ;CEL TO DISPLAY CODE
0391   00C0 CD 39 08           CALL L0839      ;CALL THE SET DOTS ROUTINE
0392   00C3 CD 42 08           CALL L0842      ;CALL SCAN/KEY/LCD/PATCH ROUTINE
0393   00C6             
0394   00C6             ;THE SECTION BELOW IS EXECUTED WHEN EITHER A KEY OR KEY "PLANT" IS DETECTED IN THE 
0395   00C6             ;SCAN/KEY/LCD/PATCH ROUTINE ROUTINE
0396   00C6             
0397   00C6 2A 2E 08           LD HL,(L082E)   ;POINT HL TO CURRENT EDIT LOCATION 
0398   00C9 4F                 LD C,A          ;PRESERVE INPUT KEY IN C
0399   00CA 3A 2B 08           LD A,(L082B)    ;GET MONITOR CONTROL BYTE (MCB) 
0400   00CD CB 67              BIT 4,A         ;TEST FOR ADDRESS OR FUNCTION MODE 
0401   00CF 47                 LD B,A          ;STORE MCB IN B
0402   00D0 79                 LD A,C          ;GET INPUT KEY BACK IN A
0403   00D1 20 2F              JR NZ,L0102     ;JUMP IF ADDRESS OR FUNCTION MODE 
0404   00D3 FE 10              CP $10         ;TEST FOR "+"
0405   00D5 20 0C              JR NZ,L00E3     ;JUMP IF NOT TO TEST FOR "-"
0406   00D7             
0407   00D7             ;"+" KEY HANDLER-(WHEN IN DATA MODE ONLY)
0408   00D7             
0409   00D7 23                 INC HL          ;ADD 1 TO CURRENT EDIT LOCATION
0410   00D8             
0411   00D8             ;COMMON CEL AND MCB UP-DATER
0412   00D8             ;SEVERAL SECTIONS JUMP HERE TO STORE AN UP-DATED CEL AND CLEAR THE NIBBLE COUNTER.
0413   00D8             
0414   00D8 22 2E 08    L00D8:  LD (L082E),HL   ;STORE CEL
0415   00DB 78                 LD A,B          ;GET MCB
0416   00DC             
0417   00DC             ;COMMON MCB UP-DATER
0418   00DC             ;SOME KEY HANDLER SECTION THAT DON'T REQUIRE.A NEW CEL (OR HAVE ALREADY STORED IT) JUMP 
0419   00DC             ;HERE.
0420   00DC             
0421   00DC E6 FC       L00DC:  AND $FC        ;CLEAR NIBBLE COUNTER
0422   00DE 32 2B 08           LD (L082B),A    ;STORE MCB
0423   00E1 18 CF       L00E1:  JR L00B2        ;JUMP BACK TO UPDATE DISPLAY 
0424   00E3 FE 11       L00E3: CP $11         ;TEST FOR "-"
0425   00E5 20 03              JR NZ,L00EA     ;JUMP IF NOT TO TEST FOR "GO"
0426   00E7             
0427   00E7             ;"-" KEY HANDLER (WHEN IN DATA MODE ONLY)
0428   00E7             
0429   00E7 2B                 DEC HL          ;DECREASE CEL ADDRESS BY ONE
0430   00E8 18 EE              JR L00D8        ;JUMP TO COMMON CEL AND MCB UP-DATER
0431   00EA FE 12       L00EA:  CP $12         ;TEST FOR GO
0432   00EC 20 14              JR NZ,L0102     ;JUMP IF NOT TO TEST FOR "AD"
0433   00EE             
0434   00EE             ;"GO" HANDLER (WHEN IN DATA MODEONLY)
0435   00EE             
0436   00EE 3A 23 08           LD A,(L0823)    ;TEST FOR ALTERNATE GO ADDRESS 
0437   00F1 FE AA              CP $AA         ;IF (0823)=AA
0438   00F3 28 05              JR Z,L00FA      ;JUMP IF SET FOR ALTERNATE GO ADDR 
0439   00F5 2A 2E 08           LD HL,(L082E)   ;ELSE GET CURRENT EDIT LOCATION 
0440   00F8 18 03              JR L00FD        ;SKIP ALTERNATE JUMP ADDRESS FETCH 
0441   00FA 2A 28 08    L00FA:  LD HL,(L0828)   ;GET ALTERNATE GO ADDRESS
0442   00FD 11 45 08    L00FD:  LD DE,L0845     ;PUT RETURN ADDRESS ON STACK
0443   0100 D5                 PUSH DE
0444   0101 E9                 JP (HL)         ;START USER EXECUTION
0445   0102             
0446   0102             ;TEST HERE FOR ADDRESS KEY. IF THE KEY PRESSED IS NOT THE ADDRESS KEY, THEN A JUMP IS 
0447   0102             ;PERFORMED. OTHERWISE THE ADDRESS KEY IS PROCESSED.
0448   0102             
0449   0102 FE 13       L0102:  CP $13            ;TEST FOR ADDRESS KEY
0450   0104 20 0B              JR NZ,L0111     ;0= IF NOT TO DATA KEY HANDLER
0451   0106 78                 LD A,B          ;GET MONITOR CONTROL BYTE (MCB)
0452   0107 CB 68              BIT 5,B         ;TEST FOR FUNCTION MODE AND JUMP TO
0453   0109 20 02              JR NZ,L010D     ;CLEAR FUNCTION MODE BITS IF SO
0454   010B EE 10              XOR $10         ;ELSE TOGGLE ADDRESS MODE BIT
0455   010D E6 D3       L010D:  AND $D3        ;CLEAR ALL FUNCTION MODE BITS
0456   010F 18 CB              JR L00DC        ;LOOP BACK TO COMMON MCB UP-DATER
0457   0111             
0458   0111             ;A TEST FOR ADDRESS/FUNCTION MODE IS DONE. IF IN ADDRESS OR FUNCTION MODE A JUMP IS 
0459   0111             ;PERFORMED.
0460   0111             
0461   0111 78          L0111:  LD A,B          ;GET MCB
0462   0112 CB 67              BIT 4,A         ;TEST FOR ADDRESS OR FUNCTION MODE
0463   0114 20 25              JR NZ,L013B     ;JUMP IF EITHER MODE
0464   0116             
0465   0116             ;A TEST FOR SHIFT IS DONE AND A JUMP IS PERFORMED IF IN THE SHIFT MODE TO THE FUNCTION/SHIFT 
0466   0116             ;HANDLER.
0467   0116             
0468   0116 DB 00              IN A,(KEYBOARD) ;TEST FOR THE SHIFT KEY
0469   0118 CB 6F              BIT 5,A         ;AND JUMP IF SHIFT IS PRESSED
0470   011A 28 34              JR Z,L0150      ;TO THE FUNCTION HANDLER
0471   011C             
0472   011C             ;ANY TIME A DATA KEY IS PRESSED WHILE IN THE DATA MODE, IT IS PROCESSED STARTING HERE.
0473   011C             
0474   011C 78                 LD A,B          ;GET MCB
0475   011D E6 03              AND $03        ;MASK IT DOWN TO BYTE COUNTER 
0476   011F FE 02              CP $02         ;AND TEST FOR TWO NIBBLES ENTERED
0477   0121 78                 LD A,B          ;INPUT KEY VALUE BACK IN A
0478   0122 20 0E              JR NZ,L0132     ;JUMP IF NOT READY FOR AUTO INC
0479   0124 F5                 PUSH AF         ;SAVE MCB
0480   0125 3A 27 08           LD A,(L0827)    ;TEST AUTO INC MASK
0481   0128 B7                 OR A            ;IF NOT ZERO THEN JUMP AS USER
0482   0129 20 04              JR NZ,L012F     ;HAS SWITCHED OFF AUTO INC MODE
0483   012B 23                 INC HL          ;ELSE INCREMENT CEL BEFORE ENTERING
0484   012C 22 2E 08           LD (L082E),HL   ;NEW NIBBLE AND STORE NEW CEL
0485   012F F1          L012F:  POP AF          ;RECOVER MON CONTROL BYTE IN A
0486   0130 E6 FC              AND $FC        ;CLEAR BYTE COUNTER (BITS 0 AND 1)
0487   0132 3C          L0132:  INC A           ;ADD ONE TO NIBBLE COUNTER
0488   0133 32 2B 08           LD  (L082B),A   ;STORE IT
0489   0136 3A 20 08           LD A, (L0820)   ;GET INPUT KEY FROM INPUT BUFFER
0490   0139 18 11              JR L014C        ;JUMP TO ENTER IT
0491   013B             
0492   013B             ;TEST HERE FOR A CONTROL KEY WHILE IN EITHER THE ADDRESS OR FUNCTION MODE AND JUMP TO 
0493   013B             ;ENCODE THE FUNCTION NUMBER BITS (2 AND 3 OF MCB). IF NOT A CONTROL KEY, THEN TEST FOR 
0494   013B             ;THE FUNCTION MODE AND JUMP TO FUNCTION JUMP CONTROL IF SO, ELSE SERVICE DATA KEY FOR 
0495   013B             ;ADDRESS MODE.
0496   013B             
0497   013B 3A 20 08    L013B:  LD A,(L0820)    ;GET INPUT KEY FROM INPUT BUFFER 
0498   013E CB 67              BIT 4,A         ;TEST FOR CONTROL KEY (+,- OR GO) 
0499   0140 20 2F              JR NZ,L0171     ;JUMP IF CONTROL TO FUNCTION ENCODER 
0500   0142 CB 68              BIT 5,B         ;TEST FUNCTION MODE
0501   0144 20 0A              JR NZ,L0150     ;JUMP IF SO TO FUNCTION JUMP CONTROL
0502   0146             
0503   0146             ;DATA KEY PRESS WHILE IN THE ADDRESS MODE
0504   0146             
0505   0146 21 2E 08           LD HL,L082E     ;POINT HL TO CEL BUFFER
0506   0149 ED 6F              RLD             ;AND SHIFT IN THE NEW NIBBLE
0507   014B 23                 INC HL          ;AND MOVE THE OTHERS ACROSS
0508   014C ED 6F       L014C:  RLD             ;THIS RLD USED BY DATA MODE ALSO
0509   014E 18 91       L014E:  JR L00E1        ;JUMP (VIA A JUMP) TO UP-DATE DISPLAYS
0510   0150             
0511   0150             ;FUNCTION AND SHIFT JUMP CONTROL
0512   0150             ;BITS 2 AND 3 OF THE MONITOR CONTROL BYTE (MCB) ARE THE FUNCTION IDENTIFIER BITS.
0513   0150             ;IF BOTH ARE ZERO THEN EITHER FUNCTION 1 IS SELECTED OR NO FUNCTION IS SELECTED. BECAUSE 
0514   0150             ;THIS IS THE ALSO THE NO FUNCTION MODE ENABLED STATE, THE SHIFT KEY, WHICH DOES NOT AFFECT 
0515   0150             ;THE MONITOR CONTROL BYTE, WILL ALSO WILL INVOKE FUNCTION 1. (THEREFORE THIS ROUTINE DOES 
0516   0150             ;NOT NEED TO TEST FOR THE SHIFT KEY).
0517   0150             ;IF BIT 2 IS HIGH THEN FUNCTION 2 IS SELECTED AND IF BIT 3 IS HIGH THEN FUNCTION 3 IS 
0518   0150             ;SELECTED.
0519   0150             ;DURING THIS ROUTINE, HL IS LOADED TO THE BASE OF THE REQUIRED JUMP TABLE MINUS TWO BYTES 
0520   0150             ; (ONE ENTRY). THIS IS BECAUSE THE OFFSET PROVIDED FROM THE KEYBOARD HAS BEEN INCREMENTED 
0521   0150             ;BY ONE. THIS SAVES TESTING FOR ZERO INPUT WHICH WOULD NOT ALLOW THE TABLE ACCESSING TO 
0522   0150             ;WORK CORRECTLY. THE REQUIRED BASE IS FOUND BY EXAMINING THE STATE OF THE BITS 2 AND 3 OF 
0523   0150             ;THE MONITOR CONTROL BYTE (MCB) AND LOADING HI, ACCORDINGLY.
0524   0150             ;AS EACH ENTRY IS TWO BYTES LONG, THE TABLE POINTER (THE VALUE INSIDE HL), IS INCREMENTED 
0525   0150             ;TWICE FOR EACH DECREMENT OF THE INPUT VALUE (FROM THE KEYBOARD). WHEN THE REQUIRED TABLE
0526   0150             ;ENTRY IS FOUND, 17 IS PUT' INSIDE EL (VIA_ DE) AND THE ROUTINE JUMPS TO PART OF THE "GO"
0527   0150             ;KEY ROUTINE TO CREATE A RETURN ADDRESS ON THE STACK AND EXECUTE THE SELECTED ROUTINE.
0528   0150             
0529   0150 78          L0150:  LD A,B          ;PUT MONITOR CONTROL BYTE IN A
0530   0151 E6 0C              AND $0C         ;MASK IT DOWN TO FUNCTION BITS
0531   0153 21 DE 07           LD HL,L07E0-2   ;JMON FUNCTION JUMP TABLE BASE -2
0532   0156 28 0A              JR Z,L0162      ;JUMP IF FUNCTION 1 OR SHIFT
0533   0158 21 BE 08           LD HL,L08C0-2   ;LOAD HL WITH USER TABLE -2
0534   015B FE 04              CP $04          ;TEST FOR FUNCTION 2
0535   015D 28 03              JR Z,L0162      ;JUMP IF FUNCTION 2 (USER FUNCTION)
0536   015F 21 1E 38           LD HL,L3820-2   ;OTHERWISE MUST BE FUNCTION 3
0537   0162 3A 20 08    L0162:  LD A,(L0820)    ;GET INPUT KEY FROM INPUT BUFFER
0538   0165 3C                 INC A           ;ADD ONE IN CASE IT WAS ZERO
0539   0166 47                 LD B,A          ;PUT IN B TO USE AS A LOOP COUNTER
0540   0167 23          L0167:  INC HL          ;LOOK THROUGH TABLE
0541   0168 23                 INC HL          ;FOR RIGHT JUMP VECTOR
0542   0169 10 FC              DJNZ L0167
0543   016B 5E                 LD E,(HL)       ;PUT IT IN HL
0544   016C 23                 INC HL          ;VIA DE
0545   016D 56                 LD D,(HL)
0546   016E EB                 EX DE,HL        ;JUMP TO CREATE RETURN ADDRESS AND
0547   016F 18 8C              JR L00FD        ;EXECUTE SELECTED ROUTINE
0548   0171             
0549   0171             ;FUNCTION NUMBER ENCODER
0550   0171             ;THIS SECTION ENCODES THE FUNCTION IDENTIFIER BITS (BITS 2 AND 3) IN THE MONITOR CONTROL 
0551   0171             ;BYTE (BITS 2 AND 3) THEN SETS THE FUNCTION ENABLE BIT (BIT 5).
0552   0171             ;THE FUNCTION IDENTIFIER BITS ARE DERIVED FROM THE LEAST TWO SIGNIFICANT BITS OF THE INPUT 
0553   0171             ;CONTROL KEY (+, AND GO). THESE ARE SHIFTED LEFT TWICE TO ALIGN THEM TO THE FUNCTION 
0554   0171             ;SELECT BITS (BITS 2 AND 3) IN THE MCB. THE INPUT CONTROL KEY IS IN THE ACCUMULATOR ON 
0555   0171             ;ENTRY AND THE MONITOR CONTROL BYTE (MCB) IN B.
0556   0171             
0557   0171 E6 03       L0171:  AND $03        ;MASK DOWN CONTROL KEY
0558   0173 07                 RLCA            ;SHIFT IT LEFT TWICE TO ALIGN BITS 0
0559   0174 07                 RLCA            ;AND 1 TO FUNCTION IDENTITY BITS IN MCB
0560   0175 F6 20              OR $20         ;SET FUNCTION MODE ENABLED FLAG
0561   0177 4F                 LD C,A          ;SAVE IN C
0562   0178 78                 LD A,B          ;GET CURRENT MCB
0563   0179 E6 D3              AND $D3        ;CLEAR ANY PREVIOUS FUNCTION BITS
0564   017B B1                 OR C            ;MERGE TOGETHER
0565   017C 32 2B 08           LD (L082B),A    ;STORE MCB
0566   017F 18 CD              JR L014E        ;JUMP VIA JUMPS TO UP-DATE DISPLAYS
0567   0181             
0568   0181             ;THIS IS THE SCAN/KEY/LCD/PATCH ROUTINE. THIS ROUTINE LOOPS SCANNING THE LED DISPLAY AND 
0569   0181             ;SERVICING THE "DURING LOOP" USER PATCH UNTIL A KEY PRESS IS VALIDATED BY THE AUTO-KEY 
0570   0181             ;REPEAT SECTION. THE INPUT KEY IS RETURNED IN THE ACCUMULATOR AND IN THE INPUT BUFFER AT 
0571   0181             ;0820 WITH THE ZERO FLAG SET AND CARRY CLEARED.
0572   0181             ;THREE PATCHES ARE SUPPORTED IN THIS ROUTINE. THEY ARE A PATCH BEFORE LOOP, A PATCH DURING 
0573   0181             ;THE LOOP AND A PATCH AFTER A VALID KEY PRESS.
0574   0181             ;THE "PLANT" IS A VALUE INSERTED INTO THE INPUT BUFFER (0820) BY THE DURING LOOP PATCH. 
0575   0181             ;THE "PLANT" VALUE IS IDENTIFIED BY BIT 7 OF THE INPUT BUFFER BEING SET. BIT 7 IS RESET 
0576   0181             ;BEFORE RETURNING TO SERVICE THE PLANT.
0577   0181             ;THIS ROUTINE USES A BYTE AT 082A, CALLED THE AUTO KEY STATUS BYTE AS A FLAG AND TIMER 
0578   0181             ;TO GENERATE THE AUTO REPEAT DELAY.
0579   0181             
0580   0181 CD 48 08    L0181:  CALL L0848      ;CALL LCD ROUTINES
0581   0184 CD 4B 08           CALL L084B      ;CALL PRE-SCAN USER PATCH
0582   0187 CD 36 08    L0187:  CALL L0836      ;CALL SCAN
0583   018A CD 4E 08           CALL L084E      ;CALL USER "DURING LOOP" PATCH
0584   018D 21 20 08           LD HL,L0820     ;TEST KEY INPUT BUFFER BIT 7 FOR A
0585   0190 CB 7E              BIT 7,(HL)      ;"PLANT" INSERTED BY USER DURING
0586   0192 CB BE              RES 7,(HL)      ;PATCH: RESET BIT 7 RETURN TO
0587   0194 C0                 RET NZ          ;SERVICE "PLANT" IF BIT 7 NOT ZERO
0588   0195 E7                 RST 20H         ;TEST FOR KEY PRESS VIA RST 20
0589   0196 21 2A 08           LD HL,L082A     ;SET HL TO POINT TO AUTO KEY STATUS
0590   0199 38 04              JR C,L019F      ;JUMP IF A KEY IS PRESSED
0591   019B 36 80              LD (HL),$0080  ;ELSE SET AUTO KEY STATUS TO
0592   019D 18 E8              JR L0187        ;NO KEY STATE AND CONTINUE LOOP
0593   019F CD CA 06    L019F:  CALL L06CA      ;CALL UNIVERSAL KEY INPUTTER
0594   01A2 CB 7E              BIT 7, (HL)     ;TEST AUTO KEY STATUS FOR FIRST KEY
0595   01A4 20 10              JR NZ,L01B6     ;JUMP IF SO TO SET LONG KEY DELAY
0596   01A6 35                 DEC (HL)        ;ELSE COUNT DOWN KEY DELAY
0597   01A7 20 DE              JR NZ,L0187     ;LOOP IF NOT READY FOR KEY REPEAT
0598   01A9 36 0C              LD (HL),$0C    ;ELSE SET SHORT TIME DELAY BETWEEN
0599   01AB CD 51 08    L01AB:  CALL L0851      ;KEYS: CALL USER "AFTER KEY" PATCH
0600   01AE CD 3F 08           CALL L083F      ;CALL KEY TONE
0601   01B1 AF                 XOR A           ;SET ZERO FLAG AND CLEAR CARRY
0602   01B2 3A 20 08           LD A, (L0820)     ;PUT INPUT KEY IN A
0603   01B5 C9                 RET               ;AND RETURN FOR KEY SERVICE
0604   01B6 36 70       L01B6:  LD  (HL),$0070   ;SET KEY TIMER FOR LONG DELAY 
0605   01B8 18 F1              JR L01AB          ;JUMP TO SERVICE PATCH, TONE ETC.
0606   01BA             
0607   01BA             ;THIS IS THE LED SCAN ROUTINE.
0608   01BA             
0609   01BA 06 20       L01BA:  LD B,20H        ;B IS THE SCAN BIT
0610   01BC 2A 2C 08           LD HL,(L082C)   ;GET ADDRESS OF DISPLAY BUFFER
0611   01BF 7E          L01BF:  LD A,(HL)       ;GET FIRST BYTE
0612   01C0 D3 02              OUT  (DSEGMENT),A    ;AND OUTPUT IT TO SEGMENTS
0613   01C2 78                 LD A,B          ;GET SCAN BIT
0614   01C3 D3 01              OUT  (DSCAN),A    ;OUTPUT IT TO COMMONS
0615   01C5 06 40              LD B,40H        ;CREATE SHORT
0616   01C7 10 FE       L01C7:  DJNZ L01C7      ;DELAY IN B
0617   01C9 23                 INC HL          ;INCREASE HL TO NEXT DISPLAY BYTE
0618   01CA 47                 LD  B,A         ;GET SCAN BIT BACK IN B
0619   01CB AF                 XOR A           ;CLEAR THE LAST PORT OUTPUTTED TO
0620   01CC D3 01              OUT (DSCAN),A     ;TO PREVENT "GHOSTING"
0621   01CE CB 08              RRC B           ;SHIFT SCAN BIT ACROSS TO NEXT 
0622   01D0 30 ED              JR NC,L01BF     ;COMMON: WHEN SCAN BIT FALLS INTO 
0623   01D2 D3 02              OUT (DSEGMENT),A     ;CARRY SCAN IS TERMINATED: CLEAR 
0624   01D4 C9                 RET             ;PORT 2 AND RETURN
0625   01D5             
0626   01D5             ;THIS ROUTINE CONVERTS HL TO DISPLAY CODE AND STORE THE DISPLAY CODE IN A BUFFER POINTED 
0627   01D5             ;TO BY BC.
0628   01D5             
0629   01D5 7C          L01D5:  LD A,H          ;PUT H IN A
0630   01D6 CD 33 08           CALL L0833      ;CONVERT A TO DISPLAY CODE 
0631   01D9 7D                 LD A,L          ;NOW DO FOR L
0632   01DA             
0633   01DA             ;THIS SECTION CONVERTS THE BYTE IN A TO TWO DISPLAY BYTES.
0634   01DA             
0635   01DA F5          L01DA:  PUSH AF         ;SAVE A
0636   01DB 07                 RLCA            ;SHIFT MSN TO LSN PLACE
0637   01DC 07                 RLCA            ;FOR NIBBLE AT A TIME CONVERSION
0638   01DD 07                 RLCA
0639   01DE 07                 RLCA
0640   01DF CD E3 01           CALL L01E3      ;CONVERT FIRST NIBBLE
0641   01E2 F1                 POP AF          ;RECOVER A TO CONVERT SECOND NIBBLE
0642   01E3 E6 0F       L01E3:  AND $0F        ;MASK OF HIGH NIBBLE
0643   01E5 11 D0 07           LD DE,L07D0     ;SET DE TO BASE OF CONVERSION
0644   01E8 83                 ADD A,E         ;TABLE: ADD A TO BASE
0645   01E9 5F                 LD E,A          ;UPDATE POINTER
0646   01EA 1A                 LD A,(DE)       ;GET DISPLAY CODE
0647   01EB 02                 LD (BC),A       ;STORE IN DISPLAY BUFFER
0648   01EC 03                 INC BC          ;INCREMENT DISPLAY BUFFER POINTER
0649   01ED C9                 RET             ;NIBBLE CONVERSION DONE
0650   01EE             
0651   01EE             ;SET DOTS
0652   01EE             ;THIS ROUTINE SETS THE DOTS IN THE DISPLAY BUFFER. IF IN ADDRESS MODE THEN 4 DOTS ARE SET 
0653   01EE             ;IN THE ADDRESS DISPLAY BUFFER, IF IN A FUNCTION MODE, THEN ONE DOT IN THE ADDRESS DISPLAY 
0654   01EE             ;- RIGHT MOST FOR FUNCTION 1 SECOND RIGHT FOR FUNCTION 2 AND THIRD RIGHT FOR FUNCTION 3.
0655   01EE             ;IF IN THE DATA MODE THEN 2 DOTS IN THE DATA DISPLAY BUFFER OR ONE DOT, ON THE RIGHTMOST 
0656   01EE             ;DISPLAY, IF TWO NIBBLES HAVE BEEN ENTERED AND IN THE AUTO-INCREMENT MODE.
0657   01EE             
0658   01EE 06 02       L01EE:  LD B,$02       ;SET B FOR 2 DOTS
0659   01F0 2A 2C 08           LD HL,(L082C)   ;PUT DISPLAY BUFFER IN HL
0660   01F3 3A 2B 08           LD A, (L082B)   ;GET MONITOR CONTROL BYTE (MCB)
0661   01F6 CB 67              BIT 4,A         ;TEST FOR ADDRESS OR FUNCTION MODE
0662   01F8 28 1A              JR Z,L0214      ;JUMP IF NOT TO DO DATA DOTS
0663   01FA CB 6F              BIT 5,A         ;TEST ONLY FOR FUNCTION MODE
0664   01FC 20 08              JR NZ,L0206     ;JUMP IF FUNCTION MODE
0665   01FE 06 04              LD B,4          ;ADDRESS MODE SO SET B FOR 4 DOTS
0666   0200 CB E6       L0200:  SET 4,(HL)      ;SET DOT IN DISPLAY BUFFER
0667   0202 23                 INC HL          ;NEXT LOCATION
0668   0203 10 FB              DJNZ L0200      ;DO 4 TIMES
0669   0205 C9                 RET             ;DONE
0670   0206 05          L0206:  DEC B           ;FUNCTION MODE: SET B FOR ONE DOT
0671   0207 CB 5F              BIT 3,A         ;TEST FOR FUNCTION 3
0672   0209 20 06              JR NZ,L0211     ;JUMP IF FUNCTION 3 TO ADD HL+1
0673   020B CB 57              BIT 2,A         ;TEST FOR FUNCTION 2
0674   020D 20 01              JR NZ,L0210     ;JUMP IF FUNCTION 2 TO ADD HL+2
0675   020F 23          L020F:  INC HL          ;INCREMENT HL TO POINT TO THE
0676   0210 23          L0210:  INC HL          ;REQUIRED DISPLAY BYTE
0677   0211 23          L0211:  INC HL          ;
0678   0212 18 EC              JR  L0200       ;JUMP TO SET DOT
0679   0214 23          L0214:  INC   HL        ;DATA MODE: HL NOW POINTS TO SECOND 
0680   0215 4F                 LD  C,A         ;LEFT MOST DISPLAY BUFFER: SAVE MCB 
0681   0216 3A 27 08           LD  A,(L0827)   ;IN C: TEST AUTO INCREMENT ENABLE 
0682   0219 B7                 OR  A           ;FLAG
0683   021A 20 F3              JR  NZ,L020F    ;JUMP IF NO AUTO INCREMENT TO SET BOTH 
0684   021C CB 49              BIT 1,C         ;DATA DOTS: TEST BYTE COUNTER FOR 2 
0685   021E 28 EF              JR  Z,L020F     ;NIBBLES: JUMP IF NOT TO SET BOTH DATA 
0686   0220 23                 INC   HL        ;DOTS: ELSE SKIP DOT ON ONE DISPLAY 
0687   0221 05                 DEC   B         ;AND DECREASE DOT COUNT FROM 2 TO 1 
0688   0222 18 EB              JR  L020F       ;JUMP TO ADJUST HL AND SET DOTS
0689   0224             
0690   0224             ;MASKABLE RESET TONE ROUTINE
0691   0224             ;IF 0822 IS NOT ZERO THEN NO TONE
0692   0224             
0693   0224 CD 3F 08    L0224:  CALL L083F      ;CALL TONE
0694   0227             
0695   0227             ;MASKABLE TONE ROUTINE
0696   0227             
0697   0227 3A 22 08    L0227:  LD A, (L0822)   ;TEST SOUND MASK
0698   022A B7                 OR A
0699   022B C0                 RET NZ          ;NO TONE IF NOT ZERO
0700   022C 0E 40              LD C,$40       ;LOAD C WITH PERIOD
0701   022E 2E 31              LD L,$31       ;LOAD L WITH NUMBER OF CYCLES 
0702   0230 AF                 XOR A           ;CLEAR A
0703   0231 D3 01       L0231:  OUT (DSCAN),A     ;OUT TO SPEAKER
0704   0233 41                 LD B,C
0705   0234 10 FE       L0234:  DJNZ L0234      ;DELAY FOR PERIOD
0706   0236 EE 80              XOR $80        ;TOGGLE SPEAKER BIT 
0707   0238 2D                 DEC L           ;DECREMENT CYCLE COUNT 
0708   0239 20 F6              JR NZ,L0231     ;LOOP UNTIL ZERO
0709   023B C9                 RET             ;DONE
0710   023C             
0711   023C             ;LCD ROUTINE
0712   023C             ;IF 0821 IS NOT ZERO, THEN LCD HAS BEEN MASKED OFF BY EITHER THE USER OR THE LCD 
0713   023C             ;INTIALIZER/TESTER ROUTINE AND NO ACTION IS TAKEN ON THE LCD. THE RST 30 (F7) IS USED 
0714   023C             ;EXTENSIVELY TO TEST AND WAIT FOR THE LCD BUSY FLAG. THROUGHOUT THESE NOTES, THE INVISIBLE
0715   023C             ;INTERNAL CURSOR ON THE LCD IS REFERRED TO AS THE CURSOR, WHILE THE ">" ON THE LCD IS
0716   023C             ;REFERRED TO AS THE PROMPT.
0717   023C             
0718   023C 3A 21 08    L023C:  LD A,(L0821)    ;TEST LCD MASK
0719   023F B7                 OR A
0720   0240 C0                 RET NZ          ;NOT ZERO = LCD NOT REQUIRED OR FITTED
0721   0241 3E 80              LD A,$80       ;SET LCD CURSOR TO HOME
0722   0243 D3 04              OUT (LCDINST),A
0723   0245 F7                 RST 30H         ;WAIT UNTIL LCD READY
0724   0246 CD 53 02           CALL L0253      ;CALL SET-UP AND OUTPUT FIRST LINE
0725   0249 3E C0              LD A,$C0       ;SET CURSOR TO BOTTOM LINE
0726   024B D3 04              OUT (LCDINST),A
0727   024D F7                 RST 30H         ;WAIT
0728   024E CD 5A 02           CALL L025A      ;CALL ROUTINE TO OUTPUT BOTTOM LINE
0729   0251 18 33              JR L0286        ;JUMP TO PROMPT ROUTINE
0730   0253             
0731   0253             ;SET-UP
0732   0253             ;MODIFY CURRENT EDIT LOCATION ADDRESS IN HL SO THAT IT POINTS TO A BYTE AT AN ADDRESS 
0733   0253             ;ENDING IN EITHER 0 OR 8.
0734   0253             
0735   0253 2A 2E 08    L0253:  LD HL,(L082E)   ;GET CEL AND PUT LOW BYTE IN A
0736   0256 7D                 LD A,L          ;THEN MASK OFF THE 3 LOWEST BITS
0737   0257 E6 F8              AND $F8        ;AS THE ADDR OF THE FIRST BYTE ON
0738   0259 6F                 LD L,A          ;THE LCD WILL END WITH 0 OR 8
0739   025A             
0740   025A             ;OUTPUT A LINE
0741   025A             
0742   025A CD 6C 02    L025A:  CALL  L026C     ;CALL "HI TO ASCII OUTPUT"
0743   025D 06 04              LD    B,04      ;SET B FOR 4 BYTES ON A LINE
0744   025F 3E 20       L025F:  LD    A,$20    ;LOAD A WITH ASCII SPACE
0745   0261 D3 84              OUT   (LCDDATA),A   ;CHARATER AND OUTPUT IT
0746   0263 F7                 RST   30H       ;WAIT
0747   0264 7E                 LD    A,(HL)    ;GET BYTE TO DISPLAY
0748   0265 CD 71 02           CALL  L0271     ;CONVERT AND OUTPUT IT
0749   0268 23                 INC HL          ;POINT TO NEXT BYTE
0750   0269 10 F4              DJNZ L025F      ;DO FOR 4 BYTES
0751   026B C9                 RET             ;DONE
0752   026C             
0753   026C             ;CONVERT HL TO ASCII (VIA CONVERT A) AND OUTPUT IT
0754   026C 7C          L026C:  LD A,H          ;CONVERT AND
0755   026D CD 71 02           CALL L0271      ;OUTPUT H
0756   0270 7D                 LD A,L          ;THEN L
0757   0271             
0758   0271             ;CONVERT A TO ASCII AND OUTPUT IT
0759   0271             
0760   0271 F5          L0271:  PUSH AF         ;SAVE A FOR SECOND NIBBLE 
0761   0272 0F                 RRCA            ;SHIFT HIGH NIBBLE ACROSS
0762   0273 0F                 RRCA            ;
0763   0274 0F                 RRCA            ;
0764   0275 0F                 RRCA            ;
0765   0276 CD 7A 02           CALL L027A      ;CALL NIBBLE CONVERTER 
0766   0279 F1                 POP AF          ;RECOVER LOW NIBBLE
0767   027A E6 0F       L027A:  AND $0F        ;MASK OFF HIGH NIBBLE 
0768   027C C6 90              ADD A,$90      ;CONVERT TO
0769   027E 27                 DAA             ;ASCII
0770   027F CE 40              ADC A,$40      ;USING THIS 
0771   0281 27                 DAA             ;AMAZING ROUTINE
0772   0282 D3 84       L0282:  OUT (LCDDATA),A ;OUTPUT IT 
0773   0284 F7                 RST 30H         ;WAIT
0774   0285 C9                 RET             ;DONE
0775   0286             
0776   0286             ;LCD PROMPT AND MODE WORD OUTPUT
0777   0286             ;THE 3 LOWEST BITS OF THE CURRENT EDIT LOCATION (CEL) ARE USED AS A DISPLACEMENT WHICH IS 
0778   0286             ;ADDED TO A TABLE BASE. THE TABLE ENTRIES ARE THE LCD ADDRESSES OF THE PROMPT LOCATIONS. 
0779   0286             ;IF THE AUTO INCREMENT MODE IS ON AND 2 NIBBLES HAVE BEEN ENTERED, THE DISPLACEMENT IS 
0780   0286             ;INCREMENTED SO THAT THE NEXT PROMPT ADDRESS TABLE ENTRY WILL BE ACCESSED TO MOVE THE 
0781   0286             ;PROMPT TO ITS NEXT SCREEN LOCATION. THE TABLE IS 9 ENTRIES LONG. 8 ARE FOR THE SPACES 
0782   0286             ;BETWEEN THE DATA BYTES AND THE NINTH IS TO PARK THE PROMPT AT THE TOP LEFT-HAND CORNER 
0783   0286             ;WHEN A SCREEN CHANGE IS DUE
0784   0286             
0785   0286 3A 2E 08    L0286:  LD A,(L082E)    ;GET LOW BYTE OF CEL
0786   0289 E6 07              AND $07        ;MASK IT DOWN TO THE 3 LOWEST BITS
0787   028B 4F                 LD C,A          ;SAVE IN C
0788   028C 3A 27 08           LD A,(L0827)    ;TEST FOR AUTO INCREMENT MODE
0789   028F B7                 OR A            ;O=ON
0790   0290 3A 2B 08           LD A,(L082B)    ;GET MCB
0791   0293 57                 LD D,A          ;PUT MCB IN D
0792   0294 20 05              JR NZ,L029B     ;JUMP IF AUTO INCREMENT MODE OFF
0793   0296 CB 4F              BIT 1,A         ;TEST FOR 2 NIBBLES ENTERED: JUMP
0794   0298 28 01              JR Z,L029B      ;IF NOT: ELSE INCREMENT
0795   029A 0C                 INC C           ;DISPLACEMENT TO ADVANCE TO
0796   029B 79          L029B:  LD A,C          ;NEXT PROMPT LOCATION ADDRESS
0797   029C 21 BD 07           LD HL,L07BD    ;LOAD HL WITH BASE OF PROMPT
0798   029F 85                 ADD A,L         ;TABLE AND ADD DISPLACEMENT
0799   02A0 6F                 LD L,A          ;PUT LOW BYTE OF TABLE ADDRESS
0800   02A1 7E                 LD A,(HL)       ;IN L AND GET PROMPT ADDRESS IN A
0801   02A2 D3 04              OUT (LCDINST),A     ;AND OUTPUT PROMPT ADDRESS TO LCD
0802   02A4 F7                 RST 30H         ;WAIT
0803   02A5 3E 3E              LD A,$3E       ;LOAD A WITH ASCII FOR ">"
0804   02A7 D3 84              OUT (LCDDATA),A     ;OUTPUT PROMPT
0805   02A9 F7                 RST 30H         ;WAIT
0806   02AA             
0807   02AA             ;OUTPUT MODE WORD TO BOTTOM LEFT CORNER OF THE LCD.
0808   02AA             ;IF THE MODE IS EITHER DATA OR ADDR, THEN THE FOUR ASCII BYTES ARE OUTPUTTED. IF IN THE 
0809   02AA             ;FUNCTION MODE, THEN ONLY THREE BYTES FROM THE TABLE ARE OUTPUTTED AND THEN THE FUNCTION 
0810   02AA             ;NUMBER IS CALCULATED AND OUTPUTTED.
0811   02AA             ;NOTICE THAT FROM THE TABLE BASE THE FIRST ENTRY (DATA) HAS A ZERO DISPLACEMENT WHILE THE 
0812   02AA             ;SECOND (ADDR) HAS A DISPLACEMENT OF 4 AND THE THIRD (Fs-) HAS A DISPLACEMENT OF 12.
0813   02AA             ;IF YOU LOOK AT THE TABLE AT 07AD, YOU WILL SEE THAT IT IS STAGGERED WITH THE THIRD ENTRY 
0814   02AA             ;12 BYTES AWAY FROM THE BASE.
0815   02AA             
0816   02AA 3E C0              LD A,$C0       ;SET CURSOR TO BOTTOM LINE
0817   02AC D3 04              OUT (LCDINST),A     ;OUTPUT
0818   02AE F7                 RST 30H         ;AND WAIT
0819   02AF 7A                 LD A,D          ;PUT MONITOR CONTROL BYTE (MCB) IN A 
0820   02B0 0F                 RRCA            ;SHIFT MODE BITS TO BITS 2 AND 3
0821   02B1 0F                 RRCA            ;TO USE AS TABLE DISPLACEMENT 
0822   02B2 57                 LD D,A          ;SAVE IN D AND MASK OFF ALL BITS
0823   02B3 E6 0C              AND $0C        ;EXCEPT THE 2 THAT FLAG BETWEEN DATA, 
0824   02B5 21 AD 07           LD HL,L07AD     ;ADDR AND FUNCTION: A=0 IF DATA, 4 IF 
0825   02B8 85                 ADD A,L         ;ADDR, 12 IF FUNCTION, NOTE THAT TABLE 
0826   02B9 6F                 LD L,A          ;IS STAGGERED (SEE 07AD): ADD A TO BASE 
0827   02BA FE B9              CP $B9         ;IF A=B9 THEN MODE IS FUNCTION MODE 
0828   02BC 01 84 04           LD BC,$0484    ;LOAD C WITH PORT, B WITH BYTE COUNT
0829   02BF 28 06              JR Z,L02C7      ;JUMP IF FUNCTION MDDE TO OUT 3 BYTES 
0830   02C1 ED A3       L02C1: OUTI      ;OUT (HL) TO (C) B=B-1
0831   02C3 F7                 RST 30H         ;HL=HL+1: WAIT FOR LCD BUSY FLAG 
0832   02C4 20 FB              JR NZ,L02C1     ;LOOP UNTIL B=0
0833   02C6 C9                 RET             ;DONE
0834   02C7 06 03       L02C7:  LD B,$03       ;ONLY THREE BYTES FOR FUNCTION MODE 
0835   02C9 CD C1 02           CALL L02C1      ;CALL THE OUTPUT ROUTINE ABOVE
0836   02CC 7A                 LD A,D          ;PUT MCB (SHIFTED RIGHT TWICE) IN A 
0837   02CD E6 03              AND $03        ;MASK IT DOWN TO GET JUST THE FUNCTION 
0838   02CF C6 31              ADD A,$31      ;NUMBER BITS: ADD ASCII "1"
0839   02D1 18 AF              JR L0282        ;JUMP TO OUTPUT FUNCTION NUMBER
0840   02D3             
0841   02D3             ;-END OF MONITOR ROUTINES- (EXCEPT KEYBOARD READER AT 06AD)
0842   02D3             
0843   02D3             ;LCD PROMPT MOVING ROUTINES. (SHIFT AND FUNCTION 1)
0844   02D3             ;THESE ROUTINES ALTER THE CURRENT EDIT LOCATION ADDRESS AND STORE IT IN ITS BUFFER. WHEN 
0845   02D3             ;THE RETURN IS DONE, JMON IS RE-ENTERED AT 00132 (VIA THE SOFT RE-ENTRY JUMP AT 0845, THE 
0846   02D3             ;ADDRESS OF WHICH HAS BEEN PLACED ON THE STACK BY PART OF THE "GO" ROUTINE).
0847   02D3             
0848   02D3 11 04 00    L02D3:  LD DE,$0004    ;DE= +4
0849   02D6 2A 2E 08    L02D6:  LD HL,(L082E)   ;PUT CEL IN HL
0850   02D9 19                 ADD HL,DE       ;ADD TO GET NEW CEL
0851   02DA 22 2E 08           LD (L082E),HL   ;STORE IN CEL BUFFER
0852   02DD C9                 RET             ;DONE
0853   02DE 11 FC FF    L02DE:  LD DE,$FFFC    ;DE= -4
0854   02E1 18 F3              JR L02D6        ;JUMP TO ADD
0855   02E3 11 FF FF    L02E3:  LD DE,$FFFF    ;DE= -1
0856   02E6 18 EE              JR L02D6        ;JUMP TO ADD
0857   02E8 11 01 00    L02E8:  LD DE,$0001    ;DE= +1
0858   02EB 18 E9              JR L02D6        ;JUMP TO ADD
0859   02ED 11 08 00    L02ED:  LD DE,$0008    ;DE= +8
0860   02F0 18 E4              JR L02D6        ;JUMP TO ADD
0861   02F2 11 F8 FF    L02F2:  LD DE,$FFF8    ;DE= -8
0862   02F5 18 DF              JR L02D6        ;JUMP TO ADD
0863   02F7             
0864   02F7             ;RESET PATCH CHECKER.
0865   02F7             ;TESTS FOR PATCH REQUIREMENT AND UP TO THE FIRST 256 BYTES OF THE PATCH ROUTINE. THE 
0866   02F7             ;CHECKSUM FEATURE ENSURES A WAY TO CHECK THAT THE PATCH OR PATCH VARIABLES HAVE NOT BEEN 
0867   02F7             ;CORRUPTED BY A SYSTEM CRASH, OTHERWISE YOU MAY NEVER REGAIN CONTROL OF THE COMPUTER UNLESS 
0868   02F7             ;YOU TURN IT OFF, (AND LOSE THE CONTENTS OF YOUR MEMORY - YOU CANNOT RECOVER IT BY A FORCED 
0869   02F7             ;HARD RESET AS THE USER PATCH IS EXECUTED BEFORE THE FORCED HARD RESET TEST). (A FORCED 
0870   02F7             ;HARD RESET IS WHEN A KEY IS HELD DOWN WHEN THE RESET KEY IS RELEASED).
0871   02F7             ;IF YOU HAVE A NON VOLATILE MEMORY AT 0800 THE SITUATION WOULD BE ABSOLUTELY HOPELESS 
0872   02F7             ;WITHOUT THIS CHECKER ROUTINE.
0873   02F7             ;A VARIABLE CAN BE PASSED TO YOUR PATCH ROUTINE IN THE "C" REGISTER. TO DO THIS THE VARIABLE 
0874   02F7             ;IS PLACED AT ADDRESS LOCATION 08B3.
0875   02F7             
0876   02F7 3A B0 08    L02F7:  LD A,(L08B0)    ;TEST FOR RESET PATCH REQUIRED
0877   02FA FE AA              CP $AA
0878   02FC C0                 RET NZ          ;RETURN IF NOT
0879   02FD ED 4B B3 08        LD BC,(L08B3)   ;PUT NO OF BYTES IN B VARIABLE IN C 
0880   0301 2A B1 08           LD HL, (L08B1)  ;START IN HL
0881   0304 AF                 XOR A           ;CLEAR A
0882   0305 86          L0305:  ADD A, (HL)     ;ADD CHECKSUM
0883   0306 23                 INC HL 
0884   0307 10 FC              DJNZ L0305      ;UNTIL B=0
0885   0309 21 B5 08           LD HL,L08B5    ;POINT TO REQUIRED CHECKSUM 
0886   030C BE                 CP (HL)         ;TEST FOR EQUAL
0887   030D C0                 RET NZ          ;ABORT IF NOT
0888   030E 2A B6 08           LD HL,(L08B6)   ;ELSE GET START ADDR
0889   0311 E9                 JP (HL)         ;AND DO RESET PATCH
0890   0312             
0891   0312             ;STEPPER ROUTINE
0892   0312             ;THE STEPPER ROUTINE IS BROKEN UP INTO SEVERAL SECTIONS. THE FIRST IS THE REGISTER SAVE, 
0893   0312             ;WHERE ALL THE Z80 USER REGISTERS ARE STORED IN MEMORY.
0894   0312             
0895   0312 22 70 08    L0312:  LD (L0870),HL   ;STORE HL IN ITS REGISTER STACK SPOT
0896   0315 21 44 03           LD HL,L0344    ;LOAD HL WITH RETURN ADDRESS
0897   0318             
0898   0318             ;MONITOR JUMPS TO HERE ON RESET TO PRESERVE USER REGISTERS.
0899   0318             
0900   0318 22 60 08    L0318:  LD (L0860),HL   ;STORE RE-ENTRY ADDRESS IN BUFFER 
0901   031B 2A 58 08           LD HL,(L0858)   ;GET ADDRESS OF INSTRUCTION JUST 
0902   031E 22 68 08           LD (L0868),HL   ;STEPPED AND PUT IT IN "NEXT PC" 
0903   0321 ED 73 7E 08        LD (L087E),SP   ;BUFFER: SAVE STACK POINTER VALUE 
0904   0325 E1                 POP HL          ;GET RETURN ADDR, THIS IS THE ADDRESS
0905   0326 22 58 08           LD (L0858),HL   ;OF NEXT BYTE TO STEP: STORE IN
0906   0329 31 7E 08           LD SP,$087E    ;"NEXT PC" BUFFER: LOAD REGISTER DUMP
0907   032C 08                 EX AF,AF'       ;STACK: PUSH ALTERNATE REGISTERS
0908   032D D9                 EXX             ;FIRST
0909   032E E5                 PUSH HL         ;SAVE AIL REGISTERS
0910   032F D5                 PUSH DE
0911   0330 C5                 PUSH BC
0912   0331 F5                 PUSH AF
0913   0332 FD E5              PUSH IY
0914   0334 DD E5              PUSH IX
0915   0336 08                 EX AF,AF'
0916   0337 D9                 EXX
0917   0338 3B                 DEC SP
0918   0339 3B                 DEC SP
0919   033A D5                 PUSH DE
0920   033B C5                 PUSH BC
0921   033C F5                 PUSH AF
0922   033D 2A 60 08           LD HL,(L0860)   ;RE-ENTER CALLING ROUTINE VIA
0923   0340 E9                 JP (HL)         ;THE ADDRESS IT SUPPLIED AT 0860
0924   0341 31 6A 08    L0341:  LD SP,L086A    ;SHIFT 7 ROUTINE START (REG DISPLAY)
0925   0344             
0926   0344             ;THE REGISTERS HAVE BEEN SAVED. NOW THE DISPLAY AND KEYBOARD HANDLER IS SET UP. THE STACK 
0927   0344             ;IS DECREMENTED BY TWO TO POINT TO THE "PC" BUFFER. THE ADDRESS IN THE "PC" BUFFER IS THE 
0928   0344             ;ADDRESS OF THE INSTRUCTION JUST STEPPED.
0929   0344             ;THE NUMBER OF THE FIRST REGISTER (1 FOR "PC") IS PUT INTO THE CURRENT REGISTER NUMBER 
0930   0344             ;BUFFER.
0931   0344             
0932   0344 21 06 08    L0344:  LD HL,L0806    ;CREATE NEW DISPLAY BUFFER
0933   0347 22 2C 08           LD (L082C),HL   ;
0934   034A 3B                 DEC SP          ;DECREASE SP BY 2 TO POINT TO THE
0935   034B 3B                 DEC SP          ;"PC" BUFFER
0936   034C             
0937   034C             ;WHEN UP-DATING THE DISPLAY, THE ROUTINE MAY JUMP BACK TO HERE IF THE FIRST DISPLAY IS 
0938   034C             ;REQUIRED.
0939   034C             
0940   034C 3E 01       L034C:  LD A,$01       ;SET UP FOR THE FIRST REGISTER (PC)
0941   034E 32 5A 08           LD (L085A),A    ;DISPLAY
0942   0351             
0943   0351             ;OR HERE IF IT HAS ALTERED THE CURRENT REGISTER NUMBER IN ITS STORAGE LOCATION (085A). 
0944   0351             
0945   0351 3A 5A 08    L0351:  LD A,(L085A)   ;DISPLAY LOOP STARTS HERE
0946   0354             
0947   0354             ;HL IS LOADED WITH THE STACK POINTER VALUE, (WHICH POINTS TO THE "PC" BUFFER), MINUS TWO. 
0948   0354             ;THE TWO IS SUBTRACTED BECAUSE AN EXTRA TWO WILL BE ADDED TO HL DURING THE REGISTER BUFFER 
0949   0354             ;CALCULATOR (IMMEDIATELY BELOW) AS THE NUMBER OF THE FIRST REGISTER IS 1 AND NOT ZERO.
0950   0354             
0951   0354 21 FE FF           LD HL,$FFFE    ;HL=-2
0952   0357 39                 ADD HL, SP      ;HL=SP-2
0953   0358 23          L0358:  INC HL          ;INCREMENT HL TO POINT TO THE
0954   0359 23                 INC HL          ;CURRENT REGISTER BUFFER
0955   035A 3D                 DEC A           ;INDICATED BY THE NUMBER IN A
0956   035B 20 FB              JR NZ,L0358
0957   035D             
0958   035D             ;HL NOW POINTS TO THE CURRENT REGISTER BUFFER. THIS SECTION PUTS THE REGISTER(S) CONTENT(S) 
0959   035D             ;INTO HL AND CONVERTS IT TO DISPLAY CODE AND STORE THE DISPLAY CODE IN THE DISPLAY BUFFER.
0960   035D             
0961   035D 7E                 LD A,(HL)     ;GET 16 BIT VALUE
0962   035E 23                 INC HL        ;AND PUT IT
0963   035F 66                 LD H,(HL)     ;BACK INTO
0964   0360 6F                 LD L,A        ;HL
0965   0361 ED 4B 2C 08        LD BC,(L082C) ;PUT DISPLAY BUFFER ADDRESS IN BC 
0966   0365 CD 30 08           CALL L0830    ;CALL HL TO DISPLAY CODE ROUTINE
0967   0368             
0968   0368             ;THIS SECTION CALCULATES THE ADDRESS OF THE REGISTER NAME FOR THE DATA DISPLAYS. THESE 
0969   0368             ;ARE STORED IN A TABLE. THE REQUIRED REGISTER NAME IS THEN TRANSFERRED TO THE DISPLAY
0970   0368             ;BUFFER.
0971   0368             
0972   0368 3A 5A 08           LD A,(L085A)    ;GET REGISTER NUMBER
0973   036B C5                 PUSH BC         ;PUT NEXT DISPLAY BUFFER
0974   036C D1                 POP DE          ;LOCATION INTO DE(stination)
0975   036D 01 02 00           LD BC,$0002    ;BC IS THE NUMBER OF DATA DISPLAYS
0976   0370 21 92 07           LD HL,$0792    ;HL=THE BASE OF THE NAME TABLE
0977   0373 09          L0373:  ADD HL,BC       ;ADD TO HL 2 FOR EACH
0978   0374 3D                 DEC A           ;REGISTER NUMBER TO ACCESS THE
0979   0375 20 FC              JR NZ,L0373     ;CURRENT REGISTER NAME
0980   0377 ED B0              LDIR            ;MOVE REGISTER NAEL INTO LAM
0981   0379             ;THE SCAN AND KEYBOARD ROUTINE ARE NOW CALLED (VIA THE RST 18). IF A VALID KEY IS PRESSED, 
0982   0379             ;THEN THE ZERO FLAG IS SET WHEN THE RST RETURNS.
0983   0379             
0984   0379 DF          L0379:  RST 18H         ;SCAN/KEY READ RST
0985   037A 21 24 08           LD HL,L0824     ;(HL)=AUTO STEP CONTROL/TIMER BYTE
0986   037D 28 0B              JR Z,L038A      ;JUMP IF VALID KEY PRESSED
0987   037F             
0988   037F             ;NO KEY IS PRESSED SO THE ROUTINE CHECKS FOR THE AUTO REPEAT MODE ENABLED FLAG (BIT 7 AUTO 
0989   037F             ;STEP CONTROL/TIMER BYTE, ZERO IS AUTO STEP ENABLED) AND DECREMENTS THE COUNTER IF IT IS. 
0990   037F             ;IF THE COUNTER REACHES ZERO, THEN IT IS RELOADED AND THE ROUTINE JUMPS TO RECOVER THE 
0991   037F             ;REGISTERS AND STEP THE NEXT INSTRUCTION. IF NOT IN THE AUTO MODE OR THE COUNTER DOES NOT 
0992   037F             ;REACH ZERO, THEN THE ROUTINE LOOPS BACK TO SCAN THE DISPLAY AND WAIT FOR EITHER A KEY 
0993   037F             ;PRESS OR FOR THE COUNTER TO REACH ZERO.
0994   037F             
0995   037F CB 7E              BIT 7,(HL)      ;TEST FOR AUTO INCREMENT JUMP IF NOT
0996   0381 20 F6              JR NZ,L0379     ;ENABLED TO SCAN/KEY READ LOOP
0997   0383 35                 DEC (HL)        ;DECREMENT COUNTER: LOOP TO
0998   0384 20 F3              JR NZ,L0379     ;SCAN/KEY READ UNTIL COUNT=0
0999   0386             
1000   0386             ;AT THIS POINT THE AUTO-STEP DELAY HAS REACHED ZERO AND IS RELOADED WITH THE DELAY VALUE. 
1001   0386             ;A JUMP IS THEN DONE TO RECOVER THE REGISTERS AND STEP THE NEXT INSTRUCTION.
1002   0386 36 30              LD (HL),$0030  ;RESET AUTO STEP DELAY, JUMP TO RECOVER
1003   0388 18 22              JR L03AC        ;REGISTERS AND STEP NEXT INSTRUCTION
1004   038A             
1005   038A             ;KEY PROCESSING STARTS HERE
1006   038A             ;THE AUTO-STEP IS DISABLED AND THEN THE KEY IS IDENTIFIED AND HANDLED. 
1007   038A             ;THE AUTO-STEP WILL BE RE-ENABLED IF THE KEY PRESSED IS A DATA KEY.
1008   038A             
1009   038A 47          L038A:  LD B,A          ;SAVE KEY
1010   038B 36 FF              LD (HL),$00FF  ;SET AUTO STEP CONTROL/TIMER BIT 7
1011   038D 21 5A 08           LD HL,L085A     ;THUS DISABLING THE AUTO REPEAT MODE
1012   0390 78                 LD A,B          ;POINT HI, TO CURRENT REG No. BUFFER
1013   0391 FE 10              CP $10         ;PUT INPUT IN A,TEST IT FOR "+"
1014   0393 20 08              JR NZ,L039D     ;JUMP IF NOT TO TEST FOR "-"
1015   0395             
1016   0395             ;"+" KEY HANDLER
1017   0395             ;THE CURRENT REGISTER NUMBER IS INCREMENTED AND THEN CHECK TO SEE THAT IT HAS NOT EXCEEDED 
1018   0395             ;THE HIGHEST REGISTER NUMBER (OC). IF IT HAS, THE ROUTINE JUMPS TO RESET THE CURRENT 
1019   0395             ;REGISTER NUMBER WITH 1, OTHERWISE IT JUMPS TO THE DISPLAY LOOP.
1020   0395             
1021   0395 34                 INC (HL)        ;INCREMENT REGISTER NUMBER
1022   0396 7E                 LD A,(HL)       ;AND CHECK TO SEE IF IT LARGER
1023   0397 FE 0D              CP $0D         ;THAN HIGHEST REG No. (0C): IF LOWER
1024   0399 38 B6              JR C,L0351      ;THAN OD JUMP TO DISPLAY LOOP ELSE
1025   039B 18 AF              JR L034C        ;JUMP TO SET REGISTER NUMBER TO 1
1026   039D FE 11       L039D:  CP 11H          ;TEST FOR "-"
1027   039F 20 07              JR NZ,L03A8     ;JUMP IF NOT
1028   03A1             
1029   03A1             ;"-" HANDLER
1030   03A1             ;ONE IS TAKEN FROM THE CURRENT REGISTER NUMBER AND THEN IT IS CHECKED FOR ZERO. IF IT 
1031   03A1             ;BECOMES ZERO, THEN THE CURRENT REGISTER NUMBER IS SET TO THE HIGHEST REGISTER NUMBER (OC) 
1032   03A1             ;TO WRAP-AROUND TO DISPLAY THE LAST REGISTER.
1033   03A1 35                 DEC (HL)        ;SUBTRACT 1 FROM REGISTER NUMBER
1034   03A2 20 AD              JR NZ,L0351     ;JUMP IF NOT 0 TO UP-DATE DISPLAY
1035   03A4 36 0C              LD (HL),$0C    ;ELSE SET TO LAST REGISTER
1036   03A6 18 A9              JR L0351        ;AND UP-DATE
1037   03A8             
1038   03A8             ;TEST FOR "GO"
1039   03A8             
1040   03A8 FE 12       L03A8:  CP $12         ;TEST FOR "GO" AND JUMP IF NOT 
1041   03AA 20 1A              JR NZ,L03C6     ;TO TEST FOR "AD" OR DATA KEY
1042   03AC             
1043   03AC             ;"GO" KEY
1044   03AC             ;THE GO KEY CAUSES STEPPING EXECUTION TO CONTINUE.
1045   03AC             ;BEFORE STEPPING IS CONTINUED THOUGH, THE KEYBOARD IS READ AND THE PROGRAM LOOPS UNTIL 
1046   03AC             ;ALL KEYS ARE RELEASED. THIS IS TO SEPARATE KEY PRESSES MEANT FOR THE STEPPER AND THOSE 
1047   03AC             ;FOR THE ROUTINE BEING STEPPED. ONCE ALL KEYS ARE RELEASED, ALL THE REGISTERS ARE POPPED 
1048   03AC             ;OF THE REGISTER DISPLAY STACK, THE STACK IS RESTORED TO ITS "REAL" POSITION AND THE 
1049   03AC             ;INTERRUPTS RE-ENABLED. THE RETURN ADDRESS FOR THE ROUTINE BEING STEPPED, STILL THERE ON 
1050   03AC             ;THE TOP OF THE REAL STACK, IS USED AS THE RETURN ADDRESS.
1051   03AC             
1052   03AC E7          L03AC:  RST 20H         ;WAIT UNTIL AIL KEYS ARE RELEASED
1053   03AD 28 FD              JR Z,L03AC      ;BEFORE RESTARTING
1054   03AF E1                 POP HL          ;RECOVER ALL
1055   03B0 F1                 POP AF          ;REGISTERS
1056   03B1 C1                 POP BC          ;IN
1057   03B2 D1                 POP DE          ;THE 
1058   03B3 E1                 POP HL          ;REVERSE
1059   03B4 DD E1              POP IX          ;ORDER
1060   03B6 FD E1              POP IY          ;TO
1061   03B8 08                 EX AF,AF'       ;HOW 
1062   03B9 D9                 EXX             ;THEY
1063   03BA F1                 POP AF          ;STORED
1064   03BB C1                 POP BC 
1065   03BC D1                 POP DE 
1066   03BD E1                 POP HL 
1067   03BE 08                 EX AF,AF' 
1068   03BF D9                 EXX
1069   03C0 ED 7B 7E 08        LD SP,(L087E)   ;AND STACK POINTER
1070   03C4 FB                 EI              ;RE-ENABLE THE INTERRUPTS 
1071   03C5 C9                 RET             ;RET TO STEP NEXT INSTRUCTION
1072   03C6             
1073   03C6             ;TEST FOR "AD" KEY  (RETURN TO JMON)
1074   03C6             
1075   03C6 FE 13       L03C6:  CP $13          ;TEST FOR "ADDR" KEY
1076   03C8 20 01              JR NZ,L03CB     ;JUMP IF NOT TO ASSUME DATA KEY
1077   03CA C7                 RST 00H         ;RETURN TO MONITOR
1078   03CB             
1079   03CB             ;DATA KEY HANDLER (ENABLE AUTO STEP)
1080   03CB             
1081   03CB 3E 20       L03CB:  LD A,$20       ;SET AND ENABLE AUTO STEP IN THE
1082   03CD 32 24 08           LD (L0824),A    ;CONTROL/TIMER BYTE (BIT 7 LOW, 20
1083   03D0 18 A7              JR L0379        ;CYCLES): JUMP TO DISPLAY LOOP
1084   03D2             
1085   03D2             ;-END OF STEPPER-
1086   03D2             
1087   03D2             ;START OF MENU
1088   03D2             ;MENU IS SET-UP FOR TAPE ROUTINE HERE
1089   03D2             ;THE VARIABLES ARE MOVED FROM ROM TO RAM AND THE DISPLAY BUFFER IS SET TO 0800.
1090   03D2             
1091   03D2 21 7C 07    L03D2:  LD HL,077CH     ;LOAD HL WITH START OF TAPE 
1092   03D5 11 80 08           LD DE,L0880     ;VARIABLES: DE IS RAM DE(stination)
1093   03D8 01 18 00           LD BC,0018H     ;BC IS THE COUNT
1094   03DB ED B0              LDIR            ;SHIFT VARIABLES
1095   03DD 21 00 08    L03DD:  LD HL,L0800     ;PUT DISPLAY BUFFER AT 0800
1096   03E0 22 2C 08           LD (L082C),HL
1097   03E3             
1098   03E3             ;MENU DISPLAY LOOP STARTS HERE
1099   03E3             ;THE MENU ENTRY NUMBER (MEN), HOLDS THE NUMBER OF THE CURRENT MENU ENTRY ON THE DISPLAY. 
1100   03E3             ;ALL ACTIONS OF THE MENU DRIVER CENTRE AROUND THIS BYTE.
1101   03E3             ;THE DISPLAY ON THE TEC LED DISPLAY IS GENERATED BY SHIFTING BOTH THE DATA AND ADDRESS 
1102   03E3             ;DISPLAY CODES INTO THE RAM DISPLAY BUFFER.
1103   03E3             ;ALL THE POSSIBLE DATA AND ADDRESS DISPLAY CODES ARE STORED IN SEPARATE TABLES IN ROM, 
1104   03E3             ;THE BASE OF EACH IS ADDRESSED BY THE CONTENTS OF MEMORY LOCATIONS 0895 (DATA TABLE), AND 
1105   03E3             ;0893 (ADDRESS TABLE).
1106   03E3             ;THE FIRST MENU ENTRY IS DENOTED BY A ZERO VALUE IN THE MENU ENTRY NUMBER (MEN). THIS 
1107   03E3             ;MEANS THAT THE POSSIBLE ZERO CONDITION MUST BY DETECTED AND THE TABLE ENTRY CALCULATOR 
1108   03E3             ;SECTION SKIPPED OVER. WHEN ACCESSING THE DISPLAY TABLES, THE MENU ENTRY NUMBER IS 
1109   03E3             ;DECREMENTED UNTIL ZERO AND EACH TIME AN OFFSET EQUAL TO THE LENGTH OF EACH TABLE ENTRY 
1110   03E3             ;(4 FOR ADDR AND 2 FOR DATA TABLES) IS ADDED TO THE POINTERS.
1111   03E3             ;AFTER THE REQUIRED ENTRIES ARE FOUND, THEY ARE MOVED INTO THE RAM DISPLAY BUFFER.
1112   03E3             
1113   03E3 3A 8F 08    L03E3:  LD A,(L088F)    ;GET MENU ENTRY NUMBER (MEN)
1114   03E6 ED 5B 95 08 L03E6:  LD DE,(L0895)   ;DE POINTS TO DATA DISPLAY TABLE 
1115   03EA 2A 93 08           LD HL,(L0893)   ;HL POINTS TO ADDR DISPLAY TABLE 
1116   03ED 01 04 00    L03ED:  LD BC,0004H     ;BC IS BOTH AN INDEX OFFSET AND 
1117   03F0 B7                 OR A            ;BYTE COUNTER (USED BELOW): TEST 
1118   03F1 28 06              JR Z,L03F9      ;A AND SKIP CALCULATOR IF ZERO 
1119   03F3 09          L03F3:  ADD HL, BC      ;ADD 4 TO HL TO POINT TO NEXT ADDR 
1120   03F4 13                 INC DE          ;DISPLAY AND 2 TO DE FOR NEXT DATA 
1121   03F5 13                 INC DE          ;DISPLAY
1122   03F6 3D                 DEC A           ;DO UNTIL A=0
1123   03F7 20 FA              JR NZ,L03F3
1124   03F9 E5          L03F9:  PUSH HL         ;SAVE ADDR POINTER (not required) 
1125   03FA D5                 PUSH DE         ;AND DATA POINTER
1126   03FB 11 00 08           LD DE,L0800     ;SHIFT ACROSS ADDR DISPLAY
1127   03FE ED B0              LDIR            ;TO 0800 (LC-0004 FROM ABOVE) 
1128   0400 E1                 POP HL          ;POP DATA DISPLAY ADDR INTO HL
1129   0401 0E 02              LD C,$02       ;SET PC TO SHIFT DATA DISPLAY BYTES
1130   0403 ED B0              LDIR            ;SHIFT THE BYTES TO DISPLAY RAM
1131   0405 E1                 POP HL          ;CLEAN UP STACK
1132   0406             
1133   0406             ;THIS SECTION CALLS THE SCAN/KEY/LCD/PATCH ROUTINE.
1134   0406             ;WHEN A KEY IS DETECTED A KEY HANDLER ROUTINE IS CALLED. THIS KEY HANDLER IS COMMON TO 
1135   0406             ;BOTH THE MENU DRIVER AND THE PERIMETER HANDLER AND IS DOCUMENTED ON FURTHER.
1136   0406             ;IF THE "GO" KEY WAS PRESSED, THE ZERO FLAG WILL BE SET WHEN THE COMMON KEY HANDLER RETURNS 
1137   0406             ;AND THE ROUTINE JUMPS TO THE GO HANDLER. IF NOT, THEN A (UNUSED BY JMON) ROUTINE (AT 
1138   0406             ;0897) IS CALLED AND FINDS AN IMMEDIATE RETURN.
1139   0406             ;THE RETURN INSTRUCTION WAS PLACED AT 0897 WHEN THE TAPE'S MENU VARIABLES WERE SHIFTED 
1140   0406             ;FROM ROM TO RAM (SEE 0793).
1141   0406             ;A JUMP THEN LOOPS BACK TO THE MAIN DISPLAY LOOP TO UP-DATE THE DISPLAYS IN CASE OF A NEW 
1142   0406             ;MENU ENTRY NUMBER (MEN) BEING PROVIDED BY THE KEY HANDLER.
1143   0406             ;THE GO HANDLER IS A SIMPLE TABLE ENTRY CALCULATOR THAT USES THE MENU ENTRY NUMBER TO 
1144   0406             ;INDEX THROUGH A TABLE OF THREE BYTE JUMPS. LIKE THE DISPLAY CALCULATOR, THE ZERO POSSIBILITY 
1145   0406             ;IS TESTED FOR AND THE CALCULATOR SECTION IS SKIPPED OVER IF ZERO. WHEN THE REQUIRED TABLE 
1146   0406             ;ENTRY IS POINTED TO BY HL, IT IS THEN JUMPED TO VIA JP (HL), AND THE TABLE ENTRY,,,ITSELF 
1147   0406             ;BEING A 3 BYTE JUMP THEN JUMPS TO THE SELECTED MENU ENTRY'S ROUTINE.
1148   0406             
1149   0406 CD 42 08           CALL  L0842     ;CALL SCAN/KEY/LCD/PATCH ROUTINE
1150   0409 21 8F 08           LD HL,L088F     ;POINT HL TO MENU ENTRY NUMBER
1151   040C CD B2 04           CALL L04B2      ;CALL COMMON KEY HANDLER
1152   040F 28 05              JR Z,L0416      ;JUMP IF KEY WAS "GO" ELSE CALL TO
1153   0411 CD 97 08           CALL L0897      ;RETURN INSTRUCTION (UNUSED BY JMON)
1154   0414 18 CD              JR L03E3        ;LOOP TO MAIN DISPLAY LOOP
1155   0416             
1156   0416             ;MENU "GO" KEYHANDLER
1157   0416             
1158   0416 2A 91 08    L0416:  LD HL,(L0891)   ;POINT HL TO BASE OF JUMP TABLE 
1159   0419 3A 8F 08           LD A,(L088F)    ;GET MENU ENTRY NUMBER
1160   041C B7                 OR A            ;TEST FOR ZERO
1161   041D 28 06              JR Z,L0425      ;SKIP CALCULATOR IF ZERO
1162   041F 23          L041F:  INC HL          ;FIND JUMP VECTOR FOR THE CURRENT
1163   0420 23                 INC HL          ;MENU HEADING
1164   0421 23                 INC HL
1165   0422 3D                 DEC A
1166   0423 20 FA              JR NZ,L041F
1167   0425 E9          L0425:  JP (HL)         ;AND JUMP TO THE REQUIRED ROUTINE
1168   0426             
1169   0426             ;PERIMETER HANDLER SET-UP ROUTINES FOR THE TAPE SOFTWARE
1170   0426             ;WHEN GO IS PRESSED IN THE MENU HANDLER, ONE OF THE IMMEDIATE FOLLOWING ROUTINES IS EXECUTED 
1171   0426             ;(WHEN THE MENU IS WORKING WITH THE TAPE SOFTWARE). THESE ROUTINES SET-UP THE VARIABLES 
1172   0426             ;FOR THE MAIN TAPE FUNCTIONS (SAVE, TEST CS, TEST BL AND LOAD). THE TWO TESTS AND THE LOAD 
1173   0426             ;ROUTINE IS BASICALLY THE ONE ROUTINE, EXCEPT THAT EACH HAS ITS OWN PRIVATE SIGN-ON BYTE. 
1174   0426             ;LATER YOU WILL SEE THE THE ROUTINE TO LOAD OR TEST IS BASICALLY THE SAME AND THIS "SIGN-ON 
1175   0426             ;BYTE" SEPARATES THE DIFFERENT FUNCTIONS AT THE CRITICAL STAGE.
1176   0426             ;THE COMMON SECTION FOR THE LOAD AND TESTS, SETS THE PERIMETER HANDLER TO HAVE TWO WINDOWS, 
1177   0426             ;ONE FOR THE FILE NUMBER AND ONE FOR THE OPTIONAL START ADDRESS. IT ALSO SETS THE OPTIONAL 
1178   0426             ;START WINDOW TO FFFF (NO OPTIONAL START ADDRESS BY DEFAULT) AND PUTS THE EXECUTING ADDRESS 
1179   0426             ;OP THE LOAD/TESTS ROUTINE IN THE PERIMETER "GO" JUMP ADDRESS BUFFER.
1180   0426             ;THE SAVE SET-UP SETS THE NUMBER OF WINDOWS TO 4 AND STORES THE EXECUTING ADDRESS OF THE 
1181   0426             ;SAVE PREAMBLE ROUTINE IN THE PERIMETER "GO" JUMP ADDRESS BUFFER (0888).
1182   0426             ;THE 4 TAPE SAVE WINDOWS ARE: THE FILE NUMBER, THE START, THE END AND THE OPTIONAL AUTO 
1183   0426             ;GO ADDRESS.
1184   0426             ;ALL THE ABOVE ROUTINES HAVE A COMMON SET-UP AREA. THIS COMMON AREA STORES THE ROUTINE'S 
1185   0426             ;JUMP ADDRESS, IN HL, AND THE NUMBER OF WINDOWS, IN A, BOTH PROVIDED FROM THEIR OWN 
1186   0426             ;DEDICATED SECTION. THE COMMON AREA ALSO CLEARS THE "ACTIVE WINDOW NUMBER" TO ZERO SO THAT 
1187   0426             ;THE PERIMETER HANDLER WILL BE ENTERED WITH THE FIRST WINDOW (FILE NUMBER) SHOWING.
1188   0426             
1189   0426             ;"LOAD" SET-UP
1190   0426             
1191   0426 AF          L0426:  XOR A           ;CLEAR A FOR LOAD SIGN-ON BYTE 
1192   0427             
1193   0427             ;COMMON AREA FOR LOAD AND TESTS
1194   0427             
1195   0427 32 8A 08    L0427:  LD (L088A),A   ;SAVE SIGN-ON BYTE IN BUFFER
1196   042A 3E 01              LD A,$01      ;LOAD A WITH NUMBER OF WANTED
1197   042C 21 FF FF           LD HL,$FFFF   ;WINDOWS -1 (2 WINDOWS): SET
1198   042F 22 9A 08           LD (L089A),HL  ;OPTIONAL START WINDOW TO FFFF
1199   0432 21 31 05           LD HL,L0531   ;LOAD HL WITH "GO" ADDR OF LOAD/TEST
1200   0435 18 0D              JR L0444       ;ROUTINE: JUMP TO STORE HL AND A
1201   0437             
1202   0437             ;"TEST BLOCK" SET-UP
1203   0437             
1204   0437 3E 02       L0437:  LD A,$02       ;2=TEST BLOCK SIGN-ON BYTE
1205   0439 18 EC       L0439:  JR L0427        ;JUMP TO TEST/LOAD COMMON AREA
1206   043B             
1207   043B             ;"TEST CHECKSUM" SET-UP
1208   043B             
1209   043B 3E 03       L043B:  LD A,$03       ;3=TEST CHECKSUM SIGN-ON BYTE 
1210   043D 18 FA              JR L0439        ;JUMP TO TEST/LOAD COMMON AREA
1211   043F             
1212   043F             ;SAVE SET-UP
1213   043F             
1214   043F 21 50 04    L043F:  LD HL,L0450     ;POINT HL TO START OF SAVE PRE-AMBLE 
1215   0442 3E 03              LD A,$03       ;SET UP FOR 4 WINDOWS
1216   0444             
1217   0444             ;COMMON AREA FOR ALL SET-UPS
1218   0444             
1219   0444 22 88 08    L0444:  LD (L0888),HL    ;STORE HL AND A
1220   0447 32 87 08           LD (L0887),A
1221   044A AF                 XOR A            ;SET MEN TO FIRST WINDOW (FILE NUMBER)
1222   044B 32 86 08           LD (L0886),A
1223   044E 18 23              JR L0473         ;JUMP TO PERIMETER HANDLER
1224   0450             
1225   0450             ;SAVE ROUTINE PRE-AMBLE
1226   0450             ;THE SAVE PREAMBLE FITS IN BETWEEN THE PERIMETER HANDLER AND THE ACTUAL SAVE ROUTINE. THE 
1227   0450             ;PURPOSE OF IT IS TO SHIFT ACROSS THE FILE NUMBER, THE START ADDRESS AND THE OPTIONAL GO 
1228   0450             ;ADDRESS. IT ALSO CALCULATES THE LENGTH OF THE BLOCK AND TRANSFERS IT ACROSS TO THE TAPE 
1229   0450             ;FILE INFORMATION BLOCK WHICH IS OUTPUTTED TO THE TAPE.
1230   0450             ;IF THE END IS LOWER THAN THE START THE ROUTINE WILL JUMP TO DISPLAY "Err -In".
1231   0450             
1232   0450 2A 9E 08    L0450:  LD HL,(L089E)   ;SHIFT OPTIONAL GO TO OUTPUT BUFFER
1233   0453 22 AA 08           LD (L08AA),HL
1234   0456 2A 9A 08           LD HL,(L089A)   ;SHIFT START ADDRESS OF BLOCK
1235   0459 22 A6 08           LD (L08A6),HL   ;TO TAPE FILE OUTPUT BUFFER
1236   045C EB                 EX DE,HL        ;PUT START OF BLOCK IN DE
1237   045D 2A 9C 08           LD HL,(L089C)   ;GET END OF BLOCK IN HL
1238   0460 B7                 OR A            ;CLEAR CARRY
1239   0461 ED 52              SBC HL,DE       ;CALCULATE NUMBER OF BYTES IN
1240   0463 23                 INC HL          ;BLOCK (DIFFERENCE +1)
1241   0464 DA 4A 00           JP  C,L004A     ;JUMP IF CARRY TO "Err-In"
1242   0467 22 A8 08           LD (L08A8),HL   ;STORE COUNT IN FILE INFO OUTPUT
1243   046A 2A 98 08           LD HL,(L0898)   ;SHIFT FILE NUMBER TO
1244   046D 22 A4 08           LD (L08A4),HL   ;TAPE FILE INFO OUTPUT BUFFER
1245   0470 C3 F0 04           JP  L04F0       ;JUMP TO SAVE OUTPUT ROUTINE
1246   0473             
1247   0473             ;FINAL TAPE SET-UP BEFORE THE PERIMETER HANDLER. THIS PLACES FFFF IN THE OPTIONAL GO WINDOW 
1248   0473             ;BEFORE ENTERING THE PERIMETER HANDLER.
1249   0473             
1250   0473 21 FF FF    L0473:  LD HL,$FFFF    ;PUT FFFF IN OPTIONAL GO WINDOW
1251   0476 22 9E 08           LD (L089E),HL   ;
1252   0479             
1253   0479             ;PERIMETER HANDLER
1254   0479             ;THE PERIMETER HANDLER ROUTINE IS SIMILAR TO THE MENU DRIVER. THE MAYOR DIFFERENCES ARE 
1255   0479             ;LISTED BELOW:
1256   0479             ;THE PERIMETER HANDLER CREATES ITS OWN ADDRESS DISPLAY CODES BY CONVERTING THE CONTENTS 
1257   0479             ;OF THE ACTIVE WINDOW TO DISPLAY CODE AND THEREFORE DOES NOT REQUIRE A TABLE OF ADDRESS 
1258   0479             ;DISPLAY CODES.
1259   0479             ;ANOTHER DIFFERENCE IS THE ADDRESS OF THE ROUTINE TO BE EXECUTED ON A "GO" PRESS IS SUPPLIED 
1260   0479             ;BY THE CALLING ROUTINE. THEREFORE THE PERIMETER HANDLER DOESN'T REQUIRE A JUMP TABLE AND 
1261   0479             ;ASSOCIATED CALCULATER.
1262   0479             ;THE ONLY OTHER MAYOR DIFFERENCE IS THAT THE PERIMETER HANDLER HAS ITS OWN BUILT IN DATA 
1263   0479             ;KEY HANDLER WHILE THE MENU DOES NOT.
1264   0479             ;THE FRONT SECTION BELOW CALCULATES THE ADDRESS OF THE ACTIVE WINDOW AND THE ADDRESS OF 
1265   0479             ;THE DATA DISPLAY FROM THE DISPLAY TABLE.
1266   0479             ;THE MENU ENTRY NUMBER FROM THE MENU DRIVER HAS AN EQUIVALENT HERE. IT IS THE ACTIVE WINDOW
1267   0479             ;NUMBER AND IS USEDIN IDENTICAL FASHION.
1268   0479             
1269   0479 3A 86 08    L0479:  LD A,(L0886)    ;GET NUMBER OF ACTIVE WINDOW
1270   047C 2A 84 08           LD HL,(L0884)   ;GET ADDRESS OF FIRST (FILE) WINDOW+1
1271   047F ED 5B 82 08        LD DE,(L0882)   ;GET BASE OF DATA DISPLAY TABLE
1272   0483 B7                 OR A            ;TEST ACTIVE WINDOW NUMBER FOR ZERO
1273   0484 28 07              JR Z,L048D      ;SKIP CALCULATOR IF ZERO
1274   0486 13          L0486:  INC DE          ;FINE CURRENT DATA DISPLAY
1275   0487 13                 INC DE          ;AND WINDOW
1276   0488 23                 INC HL 
1277   0489 23                 INC HL 
1278   048A 3D                 DEC A
1279   048B 20 F9              JR NZ,L0486
1280   048D             ;AFTER THE ADDRESS+1 OF THE ACTIVE WINDOW IS CALCULATED, IT IS STORED IN A BUFFER (AT
1281   048D             ;088C). EACH TIME A DATA KEY 1S PRESSED, HL IS LOADED FROM THIS BUFFER AND THEREFORE POINTS 
1282   048D             ;TO THE ACTIVE WINDOW. THE DATA CAN THEN BE SHIFTED INTO THE ACTIVE WINDOW IMMEDIATELY. 
1283   048D             
1284   048D 22 8C 08    L048D: LD (L088C),HL ;STORE ACTIVE WINDOW ADDRESS+l
1285   0490             
1286   0490             ;BELOW THE DATA DISPLAY BYTES ARE PUT INTO THE DATA SECTION OF THE DISPLAY BUFFER VIA HL.
1287   0490             
1288   0490 EB                 EX DE,HL        ;PUT DATA DISPLAY ADDRESS IN HL 
1289   0491 7E                 LD A,(HL)       ;GET RIGHT-HAND DISPLAY BYTE IN A 
1290   0492 23                 INC HL          ;AND LEFT-HAND IN H
1291   0493 66                 LD H,(HL)       ;PUT RIGHT-HAND BYTE IN L
1292   0494 6F                 LD L,A          ;HL HOLDS THE DATA DISPLAY BYTES 
1293   0495 22 04 08           LD (L0804),HL   ;STORE DATA DISPLAY IN BUFFER
1294   0498             
1295   0498             ;BELOW THE 16 BIT CONTENTS OF THE ACTIVE WINDOW ARE CONVERTED TO DISPLAY CODE ARE PLACED 
1296   0498             ;IN THE ADDRESS SECTION OF THE DISPLAY BUFFER.
1297   0498             
1298   0498 EB                 EX DE,HL        ;GET ACTIVE WINDOW ADDRESS FROM DE 
1299   0499 7E                 LD A,(HL)       ;AND TRANSFER
1300   049A 2B                 DEC HL          ;THE 16 BIT CONTENTS OF THE ACTIVE 
1301   049B 6E                 LD L,(HL)       ;WINDOW INTO HL
1302   049C 67                 LD H,A          ;READY TO COVERT TO DISPLAY CODE 
1303   049D 01 00 08           LD BC,L0800     ;BC=DISPLAY BUFFER START
1304   04A0 CD 30 08           CALL L0830      ;CALL CONVERSION HL TO DISPLAY CODE
1305   04A3             
1306   04A3             ;THE DISPLAY BUFFER IS NOW SET-UP AND THE SCAN/KEY LOOP IS CALLED. WHEN A KEY IS PRESSED, 
1307   04A3             ;A COMMON KEY HANDLER IS CALLED.
1308   04A3             ;THE COMMON KEY HANDLER DOES ALL THE REQUIRED PROCESSING FOR THE "+", "- " AND "AD" KEYS. 
1309   04A3             ;IF EITHER THE "GO" AR A DATA KEY IS PRESSED, THEN THE HANDLER RETURNS WITH THE FLAGS SET 
1310   04A3             ;TO SIGNIFY THESE KEYS.
1311   04A3             ;IF "GO" IS PRESSED THEN THE ZERO FLAG IS SET AND THE "GO" HANDLER BELOW IS EXECUTED. IF 
1312   04A3             ;A DATA KEY IS PRESSED THEN THE ZERO FLAG IS CLEAR (NOT ZERO) AND CARRY FLAG IS CLEAR THE 
1313   04A3             ;DATA KEY HANDLER IS EXECUTED IF THESE CONDITIONS ARE MET.
1314   04A3             
1315   04A3 CD 42 08    L04A3:  CALL L0842      ;CALL SCAN/KEY/LCD/PATCH ROUTINE 
1316   04A6 21 86 08           LD HL,L0886     ;POINT HL TO ACTIVE WINDOW NUMBER 
1317   04A9 CD B2 04           CALL L04B2      ;CALL COMMON KEY HANDLER
1318   04AC 20 16              JR NZ,L04C4     ;JUMP IF NOT GO KEY TO TEST FOR DATA 
1319   04AE 2A 88 08           LD HL,(L0888)   ;OR CONTROL KEY: ELSE GET JUMP ADDRESS 
1320   04B1 E9                 JP (HL)         ;STORED BY SET-UP AND GO
1321   04B2             
1322   04B2             ;COMMON KEY HANDLER
1323   04B2             ;BECAUSE THE PERIMETER HANDLER AND THE MENU DRIVER ARE VERY SIMILAR, THEY ARE ABLE TO 
1324   04B2             ;SHARE A COMMON KEY HANDLER.
1325   04B2             ;THE ACTION OF THE KEY HANDLER IS AS FOLLOWS:
1326   04B2             ;IF THE "AD" KEY IS PRESSED, THEN THE RETURN ADDRESS IS POPPED OFF THE STACK AND A RETURN 
1327   04B2             ;IS DONE TO THE CALLING ROUTINE (USUALLY JMON). IF THE "GO" KEY IS PRESSED, THEN THE ZERO 
1328   04B2             ;FLAG WILL BE SET AND A RETURN DONE. IT IS THEN UP TO THE CALLING ROUTINE TO SERVICE THE 
1329   04B2             ;"GO" KEY.
1330   04B2             ;A DATA KEY WILL BE FLAGGED BY SETTING THE CARRY FLAG AND CLEARING THE ZERO FLAG. LIKE 
1331   04B2             ;THE "GO" KEY, THE CALLING ROUTINE MUST DECIDE WHAT IT IS TO DO WITH THE DATA KEY (THERE 
1332   04B2             ;IS A BUILT IN DATA KEY HANDLER FOR THE PERIMETER HANDLER).
1333   04B2             ;IF EITHER THE "+" OR "-" KEYS ARE PRESSED THEN A SPECIAL ROUTINE IS CALLED. THIS ROUTINE 
1334   04B2             ;WILL ALTER THE CURRENT NUMBER OF THE ACTIVE WINDOW OR MENU ENTRY. THE RESULT IS THAT WHEN 
1335   04B2             ;THE DISPLAY IS UP-DATED, THE DISPLAYS WILL BE SHIFTED TO EITHER THE NEXT DISPLAY FOR "+" 
1336   04B2             ;OR TO THE PREVIOUS ONE FOR "- " AND WRAP-AROUND IF REQUIRED.
1337   04B2             
1338   04B2 FE 10       L04B2:  CP  $10        ;IS THE KEY
1339   04B4 28 1B              JR  Z,L04D1     ;JUMP IF SO TO "+" HANDLER 
1340   04B6 FE 11              CP  $11        ;IS IT "-"
1341   04B8 28 17              JR  Z,L04D1     ;JUMP IF SO TO "-" HANDLER 
1342   04BA FE 13              CP  $13        ;IS IT "AD"
1343   04BC 20 02              JR NZ,L04C0     ;JUMP IF NOT TO TEST FOR "GO"
1344   04BE E1                 POP HL          ;CLEAN UP STACK
1345   04BF C9                 RET             ;RETURN TO JMON (OR CALLING ROUTINE)
1346   04C0 FE 12       L04C0:  CP  $12        ;IS IT "GO"
1347   04C2 3F                 CCF             ;CLEAR CARRY IF NOT IF GO C=1 Z=1
1348   04C3 C9                 RET             ;IF DATA SET Z=0 C=0: RETURN
1349   04C4             
1350   04C4             ;BELOW IS THE PERIMETER HANDLER DATA KEY HANDLER/DISCRIMINATOR
1351   04C4             ;IF THE KEY WAS "+" OR "-" THEN IT HAS ALREADY BEEN HANDLED AND THIS CONDITION IS FLAGGED 
1352   04C4             ;BY THE CARRY BEING SET. IN THIS CASE, A JUMP IS DONE BACK TO THE MAIN BODY TO UP-DATE 
1353   04C4             ;THE DISPLAY OTHERWISE THE DATA KEY VALUE IS SHIFTED INTO THE ACTIVE WINDOW.
1354   04C4             
1355   04C4 38 B3       L04C4:  JR C,L0479      ;JUMP IF KEY WAS "+" OR "-”
1356   04C6 2A 8C 08           LD HL,(L088C)   ;POINT HL TO ACTIVE WINDOW+1
1357   04C9 2B                 DEC HL          ;POINT TO LOW ORDER BYTE
1358   04CA ED 6F              RLD             ;SHIFT IN DATA KEY VALUE
1359   04CC 23                 INC HL          ;AND SHIFT OTHER NIBBLES
1360   04CD ED 6F              RLD             ;ACROSS
1361   04CF 18 A8              JR L0479        ;JUMP BACK TO UP-DATE DISPLAY
1362   04D1             
1363   04D1             ;THIS ROUTINE IS CALLED FROM THE COMMON KEY HANDLER IF EITHER "+" OR "-" HAVE BEEN 
1364   04D1             ;PUSHED.
1365   04D1             ;THIS ROUTINE WILL EITHER INCREMENT OR DECREMENT THE MEMORY LOCATION ADDRESSED BY HL FOR 
1366   04D1             ;THE "+" AND "-" KEY RESPECTIVELY. HL WAS LOADED BY THE CALLING ROUTINE TO POINT TO ITS 
1367   04D1             ;MAIN CONTROLLING BYTE. THIS IS EITHER THE CURRENT MENU ENTRY NUMBER (MENU DRIVER), OR 
1368   04D1             ;THE ACTIVE WINDOW NUMBER (PERIMETER HANDLER) , BOTH OF WHICH HAVE BEEN DESCRIBED PREVIOUSLY. 
1369   04D1             ;AFTER INCREMENTING OR DECREMENTING (HL), THIS ROUTINE THEN CHECKS THAT THE VALUE IN (HL) 
1370   04D1             ;IS NOT GREATER THAT THE BYTE AT HL+1 (WHICH IS THE MAXIMUM NUMBER OF DISPLAYS LESS 1). 
1371   04D1             ;KEEP IN MIND, IF IT UNDERFLOWED FROM ZERO IT WILL BECOME FF AND BE HIGHER THAN (HL). THIS 
1372   04D1             ;SECOND BYTE (AT HL+1) IS THE NUMBER OF ALLOWABLE DISPLAYS-1 AND WAS PROVIDED BY THE ROM 
1373   04D1             ;TABLE FOR THE (TAPE) MENU DRIVER, AND PROVIDED BY THE PERIMETER HANDLER SET-UP ROUTINES 
1374   04D1             ;(REFER TO 042A AND 0442).
1375   04D1             ;IF THE FIRST BYTE BECOMES HIGHER THAN THE SECOND., THEN THE ROUTINE CHECKS TO SEE WHICH 
1376   04D1             ;KEY WAS PRESSED. IF THE "+" KEY WAS, THEN (HL) IS CLEARED. THIS WILL CAUSE MENU OR 
1377   04D1             ;PERIMETER HANDLER TO SHOW ITS FIRST DISPLAY WHEN RE-ENTERED.
1378   04D1             ;IF THE KEY WAS "-", THEN THE MAXIMUM NUMBER OF DISPLAYS-1 (WHICH IS THE SAME AS THE NUMBER 
1379   04D1             ;OF THE FINAL DISPLAY) IS TRANSFERRED INTO (HL) (THE NUMBER OF THE CURRENT DISPLAY). THIS 
1380   04D1             ;WILL CAUSE THE LAST DISPLAY TO BE SHOWN WHEN THE MENU DRIVER OR PERIMETER HANDLER IS 
1381   04D1             ;RE-ENTERED.
1382   04D1             ;IF THERE IS NO UNDERFLOW OR OVERFLOW THEN THE ROUTINE RETURNS JUST AFTER IT HAS EITHER 
1383   04D1             ;INCREMENTED OR DECREMENTED THE CURRENT NUMBER OF THE MENU ENTRY NUMBER OR ACTIVE WINDOW 
1384   04D1             ;NUMBER.
1385   04D1             ;WHEN THE MENU DRIVER OR PERIMETER HANDLER ARE RE-ENTERED, THEY WILL SHOW THE NEXT DISPLAY 
1386   04D1             ;FOR "+" OR THE PREVIOUS FOR "-" AND WRAP-AROUND AUTOMATICALLY IF REQUIRED.
1387   04D1             
1388   04D1 4F          L04D1:  LD C,A          ;SAVE INPUT KEY VALUE IN C
1389   04D2 23                 INC HL          ;PUT MAX NUMBER OF DISPLAYS-1
1390   04D3 46                 LD B, (HL)      ;IN B
1391   04D4 2B                 DEC HL          ;RESET HL TO POINT TO CURRENT NUMBER
1392   04D5 0F                 RRCA            ;WAS KEY "+" OR "-"? BIT 0 WILL TELL
1393   04D6 7E                 LD A,(HL)       ;PUT CURRENT NUMBER IN A
1394   04D7 38 02              JR C,L04DB      ;JUMP IF KEY WAS "-"
1395   04D9 3C                 INC A           ;INCREASE A BY 2
1396   04DA 3C                 INC A           ;
1397   04DB 3D          L04DB:  DEC A           ;DECREASE A BY ONE
1398   04DC 04                 INC B           ;ADD 1 TO MAX NUMBER-1: IS CURRENT
1399   04DD B8                 CP B            ;NUMBER EQUAL OR GREATER THAN MAX?
1400   04DE 30 05              JR NC,L04E5     ;JUMP IF SO TO UNDER/OVERFLOW HANDLER
1401   04E0 77          L04E0:  LD (HL),A       ;ELSE STORE UPDATED CURRENT NUMBER
1402   04E1 AF                 XOR A           ;SET ZERO FLAG
1403   04E2 3D                 DEC A           ;CHANGE ZERO FLAG TO 0
1404   04E3 37                 SCF             ;AND SET CARRY
1405   04E4 C9                 RET             ;DONE
1406   04E5 CB 41       L04E5:  BIT 0,C         ;TEST FOR "+" OR "-"
1407   04E7 20 03              JR NZ,L04EC     ;JUMP IF "-" TO SET CURRENT NUMBER
1408   04E9 AF                 XOR A           ;TO LAST DISPLAY: ELSE SET FIRST
1409   04EA 18 F4              JR L04E0        ;DISPLAY: JUMP TO STORE NEW NUMBER
1410   04EC 05          L04EC:  DEC B           ;CORRECT MAX NUMBER-1
1411   04ED 78                 LD A,B          ;SET A TO LAST DISPLAY NUMBER
1412   04EE 18 F0              JR L04E0        ;JUMP TO STORE LAST DISPLAY NUMBER
1413   04F0             
1414   04F0             ;THIS IS THE TAPE OUTPUT ROUTINE
1415   04F0             ;THE ACTION IS AS FOLLOWS:
1416   04F0             ;A LEADER OF LOW FREQUENCY TONE IS OUTPUTTED FOLLOWED BY THE FILE INFORMATION BLOCK. 
1417   04F0             ;AFTER THE FILE INFORMATION BLOCK IS OUTPUTTED, SEVERAL SECONDS OF HIGH FREQUENCY MIDDLE 
1418   04F0             ;SYNC IS OUTPUTTED, THE TIME IT TAKES TO OUTPUT THE MIDDLE SYNC IS USED BY THE TAPE INPUT 
1419   04F0             ;ROUTINE TO DISPLAY THE FILE NUMBER.
1420   04F0             ;THE DATA TO BE SAVED ON TAPE IS BROKEN UP INTO BLOCKS OF 256 BYTES AND OUTPUTTED WITH A 
1421   04F0             ;CHECKSUM AT THE END OF EACH BLOCK. A COUNTER IS SHOWN ON THE TEC LED DISPLAY THAT SHOWS 
1422   04F0             ;HOW MANY COMPLETE BLOCKS LEFT (UP TO 16 BLOCKS).
1423   04F0             ;IF THERE IS AN ODD SIZE BLOCK, IT IS OUTPUTTED AS THE LAST BLOCK.
1424   04F0             ;AFTER ALL THE BLOCKS HAVE BEEN OUTPUTTED, AN END OF FILE HIGH FREQUENCY TONE IS OUTPUTTED.
1425   04F0             
1426   04F0 21 00 30    L04F0:  LD HL,$3000    ;HL HAS NUMBER OF LEADER CYCLES 
1427   04F3 CD 80 06           CALL L0680      ;CALL LOW TONE
1428   04F6 21 A4 08           LD HL,L08A4     ;HL IS START OF FILE INFORMATION BLOCK 
1429   04F9 06 0C              LD B,$0C       ;LOAD B WITH NUMBER OF BYTES TO BE 
1430   04FB AF                 XOR A           ;OUTPUTTED: ZERO A FOR CHECKSUM
1431   04FC CD 4B 06           CALL L064B      ;CALL OUT BLOCK
1432   04FF 21 00 50           LD HL,$5000    ;LD HL WITH MID SYNC CYCLE COUNT
1433   0502 CD 84 06           CALL L0684      ;CALL HIGH TONE
1434   0505 2A A6 08           LD HL,(L08A6)   ;LOAD HL, WITH START OF OUTPUT BLOCK
1435   0508             
1436   0508             ;OUTPUT LOOP STARTS HERE
1437   0508             ;THE DISCUSSION BELOW ON THE BYTE COUNTER AND BLOCK FORMATION APPLIES TO THE TAPE INPUT 
1438   0508             ;LOOP ALSO. THE TAPE INPUT LOOP DESCRIPTION WILL REFER YOU BACK TO THESE NOTES.
1439   0508             ;THE BYTE COUNT IS PUT INTO BC AND THEN A ROUTINE TO CONVERT B (THE TOTAL NUMBER OF FULL 
1440   0508             ;BLOCKS TO BE OUTPUTTED) TO DISPLAY FORMAT AND OUTPUT IT IS CALLED.
1441   0508             ;THE CONVERSION ROUTINE ALSO TESTS B FOR ZERO. IF B IS NOT ZERO, THE ROUTINE RETURNS WITH 
1442   0508             ;THE ZERO FLAG CLEAR (NOT ZERO) AND THE HIGH ORDER BYTE OF THE BYTE COUNT IN B IS DECREMENTED 
1443   0508             ;BY ONE AND STORED IN ITS BUFFER. THIS COUNTS DOWN THE BLOCKS. B IS THEN ZEROED SO THAT 
1444   0508             ;A FULL BLOCK (256 BYTES) WILL BE OUTPUTTED ON RETURNING.
1445   0508             ;IF THE HIGH ORDER BYTE OF THE BYTE COUNT (IN B) IS ZERO (NO FULL BLOCK OF 256 BYTES) THEN 
1446   0508             ;C (THE LOW ORDER BYTE OF THE COUNT) IS TRANSFERRED INTO B AND THE ZERO FLAG IS SET.
1447   0508             ;THE CONVERSION THEN RETURNS WITH THE NUMBER (IF ANY) OF REMAINING BYTES IN B.
1448   0508             ;AFTER THE CONVERSION ROUTINE HAS RETURNED, A JUMP IS DONE IF THE ZERO FLAG IS CLEAR 
1449   0508             ;(DENOTING A NOT ZERO STATE). THIS JUMP SKIPS AHEAD TO SAVE THE FLAGS AND OUTPUT ONE FULL 
1450   0508             ;BLOCK
1451   0508             ;IF THE ZERO FLAG IS SET, THEN THE ROUTINE BELOW CHECKS TO SEE IF THE LOW ORDER BYTE (FROM 
1452   0508             ;C) THAT HAS BEEN PLACED IN B, IS ZERO. IF THE LOW ORDER BYTE IS ZERO, THEN ALL THE BYTES 
1453   0508             ;HAVE BEEN OUTPUTTED. THE ROUTINE THEN JUMPS TO DISPLAY " -END -S".
1454   0508             ;IF THE LOW ORDER BYTE OF THE COUNT IS NOT ZERO THEN THE ZERO FLAG IS SET AND SAVED ON 
1455   0508             ;THE STACK BEFORE WHAT ARE NOW KNOWN TO BE THE LAST IS OUTPUTTED.
1456   0508             ;BEFORE THE DATA IS SENT TO THE TAPE, A SHORT HIGH TONE SYNC IS OUTPUTTED TO COVER THE 
1457   0508             ;SOFTWARE OVERHEAD OF THE TAPE INPUT ROUTINE, AND A IS ZEROED TO BE USED AS THE CHECK-SUM.
1458   0508             
1459   0508 ED 4B A8 08 L0508:  LD BC,(L08A8)   ;LOAD BC WITH NUMBER OF BYTES
1460   050C CD C9 05           CALL L05C9      ;CALL ROUTINE TO DISPLAY BLOCK COUNT 
1461   050F 20 05              JR NZ,L0516     ;AND TEST LENGTH: JUMP IF FULL BLOCK 
1462   0511 78                 LD A,B          ;TO OUTPUT: TEST LOW BYTE OF COUNT 
1463   0512 B7                 OR A            ;IN B IS ZERO AND JUMP TO DISPLAY 
1464   0513 28 11              JR Z,L0526      ;"-END-S" IF SO
1465   0515             
1466   0515             ;THE XOR A INSTRUCTION BELOW SETS THE ZERO FLAG TO SIGNIFY THAT THE BLOCK ABOUT TO BE 
1467   0515             ;OUTPUTTED IS THE FINAL BLOCK. THE ROUTINE WILL THEN DISPLAY "-END-S" (AFTER A SHORT END 
1468   0515             ;SYNC TONE).
1469   0515             
1470   0515 AF                 XOR A           ;SET ZERO FLAG
1471   0516 F5          L0516:  PUSH AF         ;AND SAVE ON STACK
1472   0517             
1473   0517             ;AT THIS POINT IF THE ZERO FLAG ON THE STACK IS CLEAR (NOT ZERO STATE), THEN AFTER THE 
1474   0517             ;CURRENT BLOCK IS OUTPUTTED, THE ROUTINE WILL LOOP BACK TO START OF THE OUTPUT LOOP TO 
1475   0517             ;SEE IF THERE IS ANY MORE BYTES TO BE OUTPUTTED.
1476   0517 D9                 EXX             ;SWAP REGISTERS
1477   0518 21 14 02           LD HL,$0214    ;LOAD HL FOR SHORT BURST OF
1478   051B CD 84 06           CALL L0684      ;HIGH TONE
1479   051E D9                 EXX             ;SWAP BACK REGISTERS
1480   051F AF                 XOR A           ;ZERO A FOR CHECKSUM
1481   0520 CD 4B 06           CALL L064B      ;CALL OUTBLOCK
1482   0523 F1                 POP AF          ;RECOVER FLAGS AND JUMP IF
1483   0524 20 E2              JR NZ,L0508     ;THERE MIGHT BE MORE TO OUTPUT
1484   0526             
1485   0526             ;ALL BLOCKS HAVE BEEN OUTPUTTED SO FINISH WITH A SHORT END TONE AND SET-UP END DISPLAY 
1486   0526             ;"-END-S".
1487   0526 21 00 10    L0526:  LD HL,$1000    ;LOAD HL WITH SHORT END TONE
1488   0529 CD 84 06           CALL L0684      ;CALL HIGH TONE
1489   052C 3E 05              LD A,$05       ;LD A TO INDEX "END-S DISPLAY
1490   052E C3 E6 03           JP L03E6        ;JUMP BACK TO MENU
1491   0531             
1492   0531             ;THIS IS THE START OF THE TAPE INPUT SECTION.
1493   0531             ;THE ACTION HERE IS TO DETECT A VALID LEADER BY COUNTING 1000H CYCLES OF LOW FREQUENCY 
1494   0531             ;TONE. AFTER THIS HAS BEEN DETECTED, THE ROUTINE WAITS UNTIL IT DETECTS THE START BIT OF 
1495   0531             ;THE FILE INFORMATION BLOCK. THE BLOCK IS THEN LOADED IN AND A CHECK-SUM COMPARE IS DONE. 
1496   0531             ;IF AN ERROR IS DETECTED, THE ROUTINE JUMPS TO DISPLAY "FAIL -XX", OTHERWISE THE FILE 
1497   0531             ;NUMBER IS CONVERTED TO DISPLAY FORMAT AND DISPLAYED FOR A FEW SECONDS.
1498   0531             
1499   0531 01 00 10    L0531:  LD BC,$1000    ;LOAD BC TO COUNT $1000 CYCLES 
1500   0534 CD 30 06    L0534:  CALL L0630      ;CALL PERIOD
1501   0537 38 F8              JR C,L0531      ;LOOP UNTIL LOW TONE IS DETECTED 
1502   0539 0B                 DEC BC          ;COUNT LONG
1503   053A 78                 LD A,B          ;PERIODS
1504   053B B1                 OR C            ;IF BC REACHES ZERO THEN IT IS 
1505   053C 20 F6              JR NZ,L0534     ;ACCEPTED THAT A VALID FILE FOLLOWS 
1506   053E 06 0C              LD B,$0C       ;LOAD B TO INPUT 12 BYTES AND
1507   0540 21 A4 08           LD HL,L08A4    ;POINT HL TO FILE INFO BLOCK INPUT 
1508   0543 CD 30 06    L0543:  CALL L0630      ;BUFFER: CALL PERIOD
1509   0546 30 FB              JR NC,L0543     ;AND WAIT FOR LOW TONE TO END
1510   0548 CD E7 05           CALL L05E7      ;CALL INBLOCK TO GET FILE INFO BLOCK 
1511   054B 20 54              JR NZ,L05A1     ;JUMP NOT ZERO TO FAIL LOAD ROUTINE 
1512   054D 01 00 08           LD BC,L0800     ;LOAD BC TO POINT TO DISPLAY BUFFER 
1513   0550 2A A4 08           LD HL,(L08A4)   ;PUT FILE NUMBER INTO EL
1514   0553 CD 30 08           CALL L0830      ;CONVERT HL TO DISPLAY CODE
1515   0556 3E 47              LD A,$47       ;PUT "F" IN DISPLAY BUFFER
1516   0558 32 05 08           LD  (L0805),A   ;FOR "FILE"
1517   055B 01 F2 01           LD BC,$01F2    ;LD BC WITH THE DISPLAY ON TIME
1518   055E C5          L055E:  PUSH BC         ;SAVE ON STACK
1519   055F CD 36 08           CALL L0836      ;CALL SCAN
1520   0562 C1                 POP BC          ;RECOVER BC
1521   0563 0B                 DEC BC          ;DECREMENT
1522   0564 78                 LD A,B          ;AND LOOP UNTIL
1523   0565 B1                 OR C            ;BC IS ZERO
1524   0566 20 F6              JR NZ,L055E
1525   0568             
1526   0568             ;AFTER A FILE INFORMATION BLOCK IS LOADED AND THE FILE NUMBER DISPLAYED, A TEST IS DONE 
1527   0568             ;ON THE REQUIRED FILE NUMBER WINDOW. FIRST IT IS TESTED FOR FFFF (LOAD/TEST NEXT FOUND 
1528   0568             ;FILE). IF FFFF, THE ROUTINE SKIPS AHEAD TO LOAD/TEST THE FILE. OTHERWISE THE REQUIRED 
1529   0568             ;FILE NUMBER IS SUBTRACTED FROM THE JUST LOADED FILE NUMBER, IF THE RESULT IS ZERO THEN 
1530   0568             ;THE FILE IS THE ONE SELECTED AND IS LOADED/TESTED.
1531   0568             ;THE OPTIONAL START WINDOW IS THEN TESTED FOR FFFF. IF IT IS, THE START ADDRESS FROM THE 
1532   0568             ;TAPE IS USED. IF THE OPTIONAL START BUFFER HAS SOMETHING OTHER THAT FFFF, THEN THE ADDRESS 
1533   0568             ;HERE IS USED AS THE START ADDRESS TO LOAD/TEST THE TAPE.
1534   0568             
1535   0568 2A 98 08           LD HL,(L0898)   ;TEST FOR FFFF IN FILE NAME WINDOW
1536   056B 23                 INC HL
1537   056C 7C                 LD A,H
1538   056D B5                 OR L
1539   056E 2B                 DEC HL          ;JUMP IF FILE WINDOW IS FFFF
1540   056F 28 09              JR Z,L057A      ;TO INPUT FILE REGARDLESS OF ITS NUMBER 
1541   0571 ED 5B A4 08        LD DE,(L08A4)   ;ELSE TEST THAT INPUT FILE NAME
1542   0575 B7                 OR A            ;IS THE SAME AS THE ONE IN THE FILE 
1543   0576 ED 52              SBC HL,DE       ;NUMBER WINDOW AND JUMP IF NOT
1544   0578 20 B7              JR NZ,L0531     ;SELECTED FILE TO LOOK FOR NEXT FILE 
1545   057A 2A 9A 08    L057A:  LD HL, (L089A)  ;TEST THAT OPTIONAL START ADDRESS 
1546   057D 23                 INC HL          ;IS FFFF
1547   057E 7C                 LD A,H
1548   057F B5                 OR L
1549   0580 2B                 DEC HL
1550   0581 20 03              JR NZ,L0586     ;JUMP IF NOT, ELSE USE START ADDRESS 
1551   0583 2A A6 08           LD HL,(L08A6)   ;PROVIDED FROM THE TAPE
1552   0586             
1553   0586             ;THE MAIN LOAD/TEST ROUTINE STARTS HERE.
1554   0586             ;REFER TO THE DESCRIPTION OF THE BYTE COUNT AND BLOCK FORMATION AT THE OUTPUT SECTION 
1555   0586             ;ROUTINE  (SEE 508).
1556   0586             ;WHEN ALL THE BLOCKS HAVE BEEN INPUTTED AND THE ROUTINE JUMPS TO DISPLAY PASS/FAIL -Ld ON 
1557   0586             ;THE LED DISPLAY.
1558   0586             ;HL IS POINTING TO THE PLACE IN MEMORY WHERE THE FILE WILL BE LOADED/TESTED.
1559   0586             
1560   0586 ED 4B A8 08 L0586:  LD BC,(L08A8)   ;PUT NUMBER OF BYTES INTO BC 
1561   058A CD C9 05           CALL L05C9      ;CALL B CONVERT AND TEST
1562   058D 20 05              JR NZ,L0594     ;JUMP IF NOT ZERO AS THERE IS AT 
1563   058F 78                 LD A,B          ;LEAST ONE FULL BLOCK TO LOAD/TEST 
1564   0590 B7                 OR A            ;CHECK THAT B (FORMALLY C)=0
1565   0591 28 0A              JR Z,L059D      ;JUMP IF SO AS ALL BYTES DONE 
1566   0593 AF                 XOR A           ;ELSE SET ZERO FLAG TO REMEMBER 
1567   0594 F5          L0594:  PUSH AF         ;SAVE FLAGS ON STACK
1568   0595 CD E3 05           CALL L05E3      ;CALL INBLOCK
1569   0598 20 06              JR NZ,L05A0     ;JUMP IF LOAD/TEST FAILED 
1570   059A F1                 POP AF          ;RECOVER FLAGS
1571   059B 20 E9              JR NZ,L0586     ;LOOP IF THERE MIGHT BE MORE 
1572   059D AF          L059D:  XOR A           ;SET ZERO (SUCCESS) FLAG 
1573   059E 18 01              JR L05A1        ;JUMP TO END HANDLER
1574   05A0 D1          L05A0:  POP DE          ;CLEAN UP STACK
1575   05A1 20 11       L05A1:  JR NZ,L05B4     ;JUMP IF FAILED LOAD/TEST
1576   05A3             
1577   05A3             ;THE LOAD/TEST HAS PASSED. TEST HERE FOR OPTIONAL AUTO-GO AND FOR LOAD OPERATION (NO 
1578   05A3             ;AUTO-GO FOR TEST OPERATIONS). START EXECUTION AT AUTO-GO ADDRESS IF REQUIRED.
1579   05A3             
1580   05A3 2A AA 08           LD HL,(L08AA)   ;PUT OPTIONAL GO ADDRESS IN HL
1581   05A6 23                 INC HL          ;TEST FOR FFFF
1582   05A7 7C                 LD A,H          ;AND JUMP
1583   05A8 B5                 OR L            ;IF FFFF
1584   05A9 2B                 DEC HL          ;AS THERE
1585   05AA 28 07              JR Z,L05B3      ;IS NO AUTO-GO
1586   05AC 3A 8A 08           LD A,(L088A)    ;TEST THAT A LOAD OPERATION WAS 
1587   05AF B7                 OR A            ;DONE
1588   05B0 20 01              JR NZ,L05B3     ;SKIP JUMP IF IT WAS A TEST 
1589   05B2 E9                 JP (HL)         ;ELSE AUTO START THE PROGRAM 
1590   05B3 AF          L05B3:  XOR A
1591   05B4             ;THE POST LOAD/TEST MENU DISPLAYS ARE SET UP HERE. IF THE LOAD/TEST FAILED THE ZERO FLAG 
1592   05B4             ;IS CLEAR THE ROUTINE WILL POINT TO THE "FAIL" DISPLAY. OTHERWISE IT IS SET TO POINT TO 
1593   05B4             ;THE "PASS" DISPLAY. THE DATA DISPLAY IS CALCULATED BY ADDING THE MENU ENTRY NUMBER OF 
1594   05B4             ;THE JUST PERFORMED OPERATION X2, TO THE TABLE BASE OF POST LOAD/TEST DATA DISPLAYS.
1595   05B4             ;(THE MENU ENTRY NUMBER IS STILL THE SAME AS IT WAS WHEN "GO" WAS PRESS FROM THE MENU).
1596   05B4             
1597   05B4 11 68 07    L05B4:  LD DE,L0768    ;LOAD DE TO BASE OF DATA DISPLAY 
1598   05B7 21 5C 07    L05B7:  LD HL,L075C    ;TABLE AND HL "FAIL" DISPLAY 
1599   05BA 20 02              JR NZ,L05BE     ;TABLE:
1600   05BC 2E 58              LD L,$58       ;ADJUST HL TO PASS IF ZERO      
1601   05BE 3A 8F 08    L05BE:  LD A, (L088F)   ;FIND WHAT OPERATION WAS PERFORMED 
1602   05C1 07                 RLCA            ;AND DOUBLE VALUE AND ADD TO HL TO 
1603   05C2 83                 ADD A,E         ;POINT DE AT POST TAPE OPERATION 
1604   05C3 5F                 LD E,A          ;DATA DISPLAY ENTRY (SEE 0768-0771) 
1605   05C4 00                 NOP             ;(FROM FIXED ERROR)
1606   05C5 AF                 XOR A           ;ZERO A
1607   05C6 C3 47 00           JP L0047        ;JUMP TO SOFT MENU ENTRY
1608   05C9             
1609   05C9             ;THIS IS THE CONVERT/TEST B ROUTINE.
1610   05C9             ;THE VALUE IN B IS CONVERTED AND OUTPUTTED TO PORT 2.
1611   05C9             ;THEN B IS TESTED AND ONE OF THE FOLLOWING OPERATIONS IS PERFORMED. IF B=0 THEN C IS 
1612   05C9             ;TRANSFERRED INTO B AND THE ZERO FLAG IS SET. IF B IS NOT 0 THEN B IS DECREMENTED, THE 
1613   05C9             ;COUNT IS UP-DATED IN ITS BUFFER AND THE ZERO FLAG AND B IS CLEARED.
1614   05C9             
1615   05C9 78          L05C9:  LD A,B          ;PUT HIGH BYTE OF COUNT IN A 
1616   05CA E6 0F              AND $0F        ;MASK TO ONE DIGIT
1617   05CC 11 D0 07           LD DE,L07D0     ;POINT DE TO DISPLAY CODE TABLE 
1618   05CF 83                 ADD A,E         ;ADD A
1619   05D0 5F                 LD E,A 
1620   05D1 1A                 LD A, (DE)      ;GET DISPLAY VALUE
1621   05D2 D3 02              OUT (DSEGMENT),A       ;OUTPUT IT TO DISPLAY
1622   05D4 78                 LD A,B          ;TEST HIGH BYTE
1623   05D5 B7                 OR A            ;FOR ZERO
1624   05D6 28 09              JR Z,L05E1      ;JUMP IF ZERO
1625   05D8 05                 DEC B           ;ELSE DECREASE COUNT BY ONE BLOCK 
1626   05D9 ED 43 A8 08        LD (L08A8),BC   ;STORE COUNT
1627   05DD 06 00              LD B,$00       ;LOAD B FOR 256 BYTE OUTPUT BLOCK 
1628   05DF B7                 OR A            ;CLEAR ZERO FLAG
1629   05E0 C9                 RET             ;DONE
1630   05E1 41          L05E1:  LD B,C          ;PUT LAST BLOCK SIZE IN B
1631   05E2 C9                 RET             ;DONE
1632   05E3             
1633   05E3             ;THIS BLOCK LOADS/TESTS THE BYTES IN FROM THE TAPE. THE NUMBER OF BYTES IS HELD IN B ON 
1634   05E3             ;INPUT. AFTER THE SUB-ROUTINE THAT INPUTS A BYTE IS CALLED, A TEST AND JUMP IS DONE. THE 
1635   05E3             ;TEST AND JUMP SELECT THE REQUIRED CODE TO PERFORM A LOAD OR TEST AS SELECTED FROM THE 
1636   05E3             ;MENU BY THE USER. THE CHECK-SUM LOADED FROM THE TAPE HAS HAD ONE ADDED TO IT BY THE TAPE 
1637   05E3             ;OUTPUT ROUTINE. THIS ADDED ONE IS REMOVED IN THIS ROUTINE BEFORE THE CHECK-SUM COMPARE 
1638   05E3             ;IS DONE.
1639   05E3             
1640   05E3 3A 8A 08    L05E3:  LD A, (L088A)   ;GET CURRENT OPERATION
1641   05E6 4F                 LD C,A          ;SAVE IN C
1642   05E7 AF          L05E7:  XOR A           ;CLEAR A FOR CHECKSUM
1643   05E8 F5          L05E8:  PUSH AF         ;SAVE CHECKSUM 
1644   05E9 CD 0B 06           CALL L060B      ;CALL GET BYTE 
1645   05EC CB 49              BIT 1,C         ;TEST FOR CURRENT OPERATION
1646   05EE 20 0E              JR NZ,L05FE     ;JUMP IF A EITHER TEST
1647   05F0 73                 LD (HL),E       ;ELSE STORE INPUTTED BYTE IN MEMORY 
1648   05F1 23                 INC HL          ;POINT TO NEXT LOCATION
1649   05F2 F1          L05F2:  POP AF          ;GET CHECKSUM 
1650   05F3 83          L05F3:  ADD A,E         ;ADD TO NEW BYTE
1651   05F4 10 F2              DJNZ L05E8      ;DO UNTIL BLOCK DONE
1652   05F6 F5                 PUSH AF         ;SAVE CHECKSUM 
1653   05F7 CD 0B 06           CALL L060B      ;GET TAPE CHECKSUM
1654   05FA F1                 POP AF          ;GET MEMORY CHECKSUM
1655   05FB 1D                 DEC E           ;CORRECT TAPE CHECKSUM
1656   05FC BB                 CP E            ;TEST CHECKSUMS TO SET FLAGS
1657   05FD C9                 RET             ;BLOCK DONE
1658   05FE CB 41       L05FE:  BIT 0,C         ;TEST FOR WHICH TEST
1659   0600 28 F0              JR Z,L05F2      ;JUMP IF CHECKSUM ONLY TEST
1660   0602 F1                 POP  AF         ;GET CHECKSUM
1661   0603 57                 LD D,A          ;SAVE IN D
1662   0604 7B                 LD A,E          ;GET INPUT BYTE
1663   0605 BE                 CP (HL)         ;TEST TO MEMORY
1664   0606 23                 INC  HL         ;POINT TO NEXT LOCATION
1665   0607 7A                 LD A,D          ;PUT CHECKSUM BACK IN A
1666   0608 28 E9              JR Z,L05F3      ;JUMP TO MAIN LOOP IF ALL OK
1667   060A C9                 RET             ;RETURN IF ERROR
1668   060B             
1669   060B             ;THIS ROUTINE INPUTS A SINGLE BYTE.
1670   060B             
1671   060B CD 18 06    L060B:  CALL L0618      ;GET START BIT
1672   060E 16 08              LD D,$08       ;LOAD D FOR 8 BITS 
1673   0610 CD 18 06    L0610:  CALL L0618      ;GET BIT
1674   0613 CB 1B              RR E            ;PUT IT IN E
1675   0615 15                 DEC D
1676   0616 20 F8              JR NZ,L0610     ;DO FOR EIGHT BITS,
1677   0618             
1678   0618             ;THIS ROUTINE INPUTS A SINGLE BIT
1679   0618             ;THE STRUCTURE OF EACH BIT IS IMPORTANT TO UNDERSTAND AT THIS POINT. A LOGIC 0 IS REPRESENTED 
1680   0618             ;BY 4 SHORT PERIODS FOLLOWED BY 1 LONG PERIOD AND A LOGIC 1 BY 2 SHORT PERIODS AND 2 LONG 
1681   0618             ;PERIODS. THESE ARE HIGH SPEED FIGURES. FOR LOW SPEED THE ABOVE COUNTS ARE DOUBLED.
1682   0618             ;THE BITS ARE DECODED BY COUNTING THE RATIO OF SHORT PERIODS TO LONG PERIODS. A COMPLICATED 
1683   0618             ;METHOD OF COUNTING IS USED TO RESULT IN THE BIT VALUE BEING REFLECTED IN BIT 7 OF L. THE 
1684   0618             ;ROUTINE IS TERMINATED WHEN A SHORT PERIOD THAT FOLLOWED A LONG PERIOD IS DETECTED. THE 
1685   0618             ;LONG PERIOD IS FLAGGED WITH BIT 0 OF H. THE "SHORT AFTER LONG" PERIOD USED FOR TERMINATION
1686   0618             ;IS ACTUALLY THE FIRST CELL OF THE NEXT BIT.
1687   0618             ;THE VALUE OF THE BIT INPUTTED IS THEN POT INTO THE CARRY FLAG.
1688   0618             
1689   0618 D9          L0618:  EXX             ;SWAP REGISTERS
1690   0619 21 00 00           LD HL,$0000    ;ZERO HL
1691   061C CD 30 06    L061C:  CALL L0630      ;CALL TO MEASURE PERIOD
1692   061F 38 06              JR C, L0627     ;JUMP IF SHORT PERIOD
1693   0621 2D                 DEC L           ;SET HIGH ORDER BIT OF L TO ONES
1694   0622 2D                 DEC L
1695   0623 CB C4              SET 0,H         ;REMEMBER THAT THE LONG PERIOD
1696   0625 18 F5              JR L061C        ;HAS BEEN DETECTED: LOOP BACK
1697   0627 2C          L0627:  INC L           ;SHORT PERIOD SO ADD ONE TO L
1698   0628 CB 44              BIT 0,H         ;TEST FOR SHORT AFTER LONG PERIOD
1699   062A 28 F0              JR Z,L061C      ;JUMP IF NOT
1700   062C CB 15              RL L            ;END OF BIT: PUT BIT 7,L INTO
1701   062E D9                 EXX             ;CARRY: SWAP REGISTERS
1702   062F C9                 RET             ;INPUT BIT IN CARRY
1703   0630             
1704   0630             ;THIS ROUTINE INPUTS AND MEASURES THE PERIOD OF EACH TAPE CELL AND COMPARES IT TO THE 
1705   0630             ;THRESHOLD BETWEEN A SHORT AND LONG PERIOD. THE  CELL IS ALSO ECHOED ON THE TEC SPEAKER.
1706   0630             
1707   0630 11 00 00    L0630:  LD DE,$0000    ;ZERO DE FOR PERIOD MEASUREMENT
1708   0633 DB 00       L0633:  IN A,(DATLATCH)        ;TEST TAPE LEVEL
1709   0635 13                 INC DE          ;TIME PERIOD
1710   0636 17                 RLA             ;PUT TAPE LEVEL INTO CARRY
1711   0637 30 FA              JR NC,L0633     ;LOOP UNTIL IT GOES HIGH
1712   0639 AF                 XOR A           ;ECHO IT ON
1713   063A D3 01              OUT (DSCAN),A     ;THE TEC SPEAKER
1714   063C DB 00       L063C:  IN A,(DATLATCH)        ;MEASURE SECOND HALF OF CYCLE
1715   063E 13                 INC DE          ;IN THE SAME FASHION AS ABOVE
1716   063F 17                 RLA
1717   0640 38 FA              JR C,L063C      ;THIS TIME LOOP UNTIL TAPE LEVEL
1718   0642 3E 84              LD A,$84        ;GOES LOW: ECHO IT ON TEC SPEAKER
1719   0644 D3 01              OUT  (DSCAN),A
1720   0646 7B                 LD A,E          ;GET PERIOD MEASUREMENT
1721   0647 FE 1A              CP $1A         ;COMPARE IT TO THRESHOLD
1722   0649 C9                 RET             ;TO SET FLAGS: DONE
1723   064A             
1724   064A             ;THIS ROUTINE OUTPUTS A BLOCK TO THE TAPE. THE NUMBER OF BYTES IS HELD IN B AND THE BLOCK 
1725   064A             ;IS ADDRESS BY HL. AFTER ALL THE BYTES HAVE BEEN OUTPUTTED, THE CHECKSUM +1, WHICH WAS 
1726   064A             ;ADDED OF AS EACH BYTE WAS OUTPUTTED, IS SENT TO THE TAPE.
1727   064A             
1728   064A 08          L064A:  EX AF,AF'       ;GET CHECKSUM IN A
1729   064B 5E          L064B:  LD E,(HL)       ;PUT BYTE TO BE OUTPUTTED IN E 
1730   064C 83                 ADD A,E         ;ADD FOR CHECKSUM
1731   064D 08                 EX AF,AF'       ;SAVE IN ALTERNATE AF
1732   064E CD 57 06           CALL L0657      ;CALL OUT BYTE
1733   0651 23                 INC HL          ;POINT TO NEXT BYTE
1734   0652 10 F6              DJNZ  L064A
1735   0654 08                 EX AF,AF'       ;GET CHECKSUM
1736   0655 3C                 INC A           ;INCREASE IT BY ONE
1737   0656 5F                 LD E,A          ;PUT IT IN E
1738   0657             
1739   0657             ;THIS ROUTINE OUTPUTS A SINGLE BYTE IN E TO THE TAPE. THE FORMAT IS 1 START BIT, EIGHT 
1740   0657             ;DATA BITS AND 1 STOP BIT.
1741   0657             
1742   0657 16 08       L0657:  LD D,$08       ;SET D FOR 8 BITS
1743   0659 B7                 OR A            ;CLEAR CARRY AND CALL OUTBIT
1744   065A CD 66 06           CALL L0666      ;TO OUTPUT BINARY ZERO FOR START BIT 
1745   065D CB 1B       L065D:  RR E            ;PUT FIRST BIT IN CARRY
1746   065F CD 66 06           CALL L0666      ;CALL OUT BIT
1747   0662 15                 DEC D
1748   0663 20 F8              JR NZ,L065D     ;DO FOR 8 BITS
1749   0665 37                 SCF             ;SET CARRY TO OUTPUT STOP BIT (1)
1750   0666             
1751   0666             ;THIS ROUTINE OUTPUTS A SINGLE BIT. IF THE CARRY IS SET, THEN A LOGIC 1 IS OUTPUTTED 
1752   0666             ;OTHERWISE A LOGIC O.
1753   0666             ;A 1 IS REPRESENTED BY 2 SHORT AND 2 LONG PERIODS.
1754   0666             ;A 0 IS REPRESENTED BY 4 SHORT PERIODS AND 1 LONG PERIOD.
1755   0666             ;L IS LOADED WITH DOUBLE THE LOW SPEED CYCLE COUNT AS IT IS USED TO COUNT THE HALF CYCLES 
1756   0666             ;IN THE TONE ROUTINE. IF THE HIGH SPEED SAVE IS SELECTED, THEN THE CYCLE COUNT WILL BE
1757   0666             ;HALVED IN THE TONE ROUTINE.
1758   0666             
1759   0666 D9          L0666:  EXX             ;SWAP REGISTERS
1760   0667 26 00              LD H,$00       ;ZERO H
1761   0669 38 09              JR C,L0674      ;JUMP IF BINARY 1 IS TO BE OUTPUTTED
1762   066B 2E 10              LD L,$10       ;LOAD L WITH HIGH TONE CYCLE COUNT
1763   066D CD 84 06           CALL L0684      ;CALL HIGH TONE
1764   0670 2E 04              LD L,$04       ;LOAD L WITH LOW TONE CYCLE COUNT
1765   0672 18 07              JR L067B        ;JUMP TO LOW TONE
1766   0674 2E 08       L0674:  LD L,$08       ;LOAD L FOR HIGH TONE CYCLE COUNT
1767   0676 CD 84 06           CALL L0684      ;FOR BINARY ONE: CALL HIGH TONE
1768   0679 2E 08              LD L,$08       ;LOAD L FOR LOW TONE CYCLE COUNT
1769   067B CD 80 06    L067B:  CALL L0680      ;CALL LOW TONE
1770   067E D9                 EXX             ;SWAP BACK REGISTERS
1771   067F C9                 RET             ;DONE
1772   0680             
1773   0680             ;SET-UP FOR LOW TONE (LONG PERIOD)
1774   0680             
1775   0680 0E 29       L0680:  LD C,$29        ;LOAD C FOR LOW TONE
1776   0682 18 02              JR L0686        ;JUMP TO TONE ROUTINE
1777   0684             
1778   0684             ;SET-UP FOR HIGH TONE (SHORT PERIOD)
1779   0684             
1780   0684 0E 11       L0684:  LD C,11H        ;LOAD C FOR HIGH TONE
1781   0686             
1782   0686             ;TONE ROUTINE 
1783   0686             ;TESTS FOR LOWSPEED SAVE. IF SO THEN IT HALVES THE CYCLE COUNT IN L.
1784   0686             
1785   0686 3A 8F 08    L0686:  LD A,(L088F)    ;FIND WHICH SPEED
1786   0689 B7                 OR A            ;ZERO = HIGH SPEED
1787   068A 20 02              JR NZ,L068E     ;JUMP IF LOW SPEED
1788   068C CB 3D              SRL L           ;ELSE HALVE CYCLE COUNT
1789   068E 11 01 00    L068E:  LD DE,0001H     ;
1790   0691 3E 84              LD A,$84       ;TURN ON SPEAKER AND MIDDLE DISPLAY
1791   0693 D3 01       L0693:  OUT (DSCAN),A   ;
1792   0695 41                 LD B,C          ;
1793   0696 10 FE       L0696:  DJNZ L0696      ;PERIOD DELAY
1794   0698 EE 80              XOR $80         ;TOGGLE SPEAKER BIT
1795   069A ED 52              SBC HL,DE       ;DECREASE CYCLE COUNT
1796   069C 20 F5              JR NZ,L0693     ;JUMP IF NOT ALL CYCLES DONE
1797   069E C9                 RET             ;ELSE RETURN
1798   069F             
1799   069F             ;THIS ROUTINE SETS UP THE "ERR-IN DISPLAY ON THE PERIMETER HANDLER.
1800   069F             
1801   069F 21 52 07    L069F:  LD HL,L0752    ;POINT HL TO "Err-In" DISPLAY
1802   06A2 11 00 08           LD DE,L0800    ;CODE AND DE TO RAM DEstination
1803   06A5 01 06 00           LD BC,$0006    ;BC(ount)
1804   06A8 ED B0              LDIR            ;MOVE BLOCK
1805   06AA C3 50 00           JP L0050        ;JUNE TO SOFT PERIMETER ENTRY
1806   06AD             
1807   06AD             ;----END OF TAPE ROUTINES----
1808   06AD             ;THIS ROUTINE IS THE KEYBOARD READER/VALIDATER
1809   06AD             ;THE ACTION IS AS FOLLOWS:
1810   06AD             ;A SHORT LOOP LOOKS FOR A KEY PRESS. IF NO KEY IS PRESSED, THEN THE KEY PRESS BUFFER (0825) 
1811   06AD             ;IS CLEARED THE ZERO AND THE CARRY FLAG CLEARED AND THE ROUTINE RETURNS.
1812   06AD             ;IF A KEY IS FOUND, THEN THE REMAINING LOOP COUNTS ARE WORKED OFF IN A DUMMY LOOP TO ENSURE 
1813   06AD             ;EQUAL TIME IN EXECUTING THE ROUTINE.
1814   06AD             ;IF IT IS THE FIRST TIME.THAT THE KEY HAS BEEN DETECTED, THEN THE KEY PRESS FLAG WILL BE 
1815   06AD             ;CLEAR. (IT WAS CLEARED BY THE MONITOR VARIABLES ON RESET). THE ROUTINE TESTS FOR THIS 
1816   06AD             ;CONDITION AND IF TRUE THEN THE KEY IS ACCEPTED AS "VALID" AND FLAGGED BY A SET CARRY AND 
1817   06AD             ;SET ZERO FLAG AND THE KEY PRESS FLAG IS SET TO INDICATE THE A KEY HAS BEEN DETECTED. THE
1818   06AD             ;INPUT IS THEN PLACED IN BOTH THE "I" REGISTER AND THE ACCUMULATOR. IF A KEY IS DETECTED 
1819   06AD             ;BUT FOUND NOT TO BE VALID, I.E. IT HAS ALREADY BEEN DETECTED AND PROCESSED, THEN THE 
1820   06AD             ;CARRY WILL BE SET BUT THE ZERO CLEARED. THIS ALLOWS THE AUTO KEY REPEAT SECTION TO KNOW 
1821   06AD             ;THAT A KEY IS STILL BEING HELD DOWN. THE AUTO KEY REPEAT SECTION MAKE UP ITS OWN MIND 
1822   06AD             ;WHETHER IT IS VALID OR NOT.
1823   06AD             
1824   06AD DB 00       L06AD:  IN A,(DATLATCH) ;TEST FOR KEY PRESSED
1825   06AF CB 77              BIT 6,A
1826   06B1 28 08              JR Z,L06BB      ;DA IS LOW = KEYPRESS
1827   06B3 10 F8              DJNZ L06AD      ;LOOP LOOKING FOR KEY UNTIL B=0
1828   06B5 AF          L06B5:  XOR A           ;CLEAR KEY PRESS FLAG
1829   06B6 32 25 08           LD (L0825),A
1830   06B9 3D                 DEC A           ;SET A TO FF AND CLEAR ZERO FLAG
1831   06BA C9          L06BA:  RET             ;DONE
1832   06BB 3A 25 08    L06BB:  LD A,(L0825)    ;GET KEY PRESS FLAG
1833   06BE B7                 OR A            ;TEST FOR ZERO
1834   06BF 20 00              JR NZ,L06C1     ;DUMMY JUMP TO EQUALIZE TIME
1835   06C1 10 F8       L06C1:  DJNZ L06BB      ;FINISH LOOP
1836   06C3 37                 SCF             ;SET CARRY
1837   06C4 20 F4              JR NZ,L06BA     ;DUMMY JUMP TO RETURN
1838   06C6 3D                 DEC A           ;SET KEY PRESS FLAG TO FF
1839   06C7 32 25 08           LD (L0825),A
1840   06CA DB 00       L06CA:  IN A,(KEYBOARD)     ;GET INPUT KEY FROM ENCODER CHIP
1841   06CC E6 1F              AND $1F        ;MASK OFF UNUSED BITS
1842   06CE CB 7F              BIT 7,A         ;SET ZERO FLAG (THINK ABOUT IT!)
1843   06D0 37                 SCF             ;SET CARRY
1844   06D1 32 20 08           LD (L0820) ,A   ;STORE INPUT KEY
1845   06D4 C9                 RET             ;DONE
1846   06D5             
1847   06D5             ;THIS ROUTINE IS CALLED ONCE ON EVERY HARD RESET. IT INITIALIZES THE LCD THEN TESTS THAT 
1848   06D5             ;IT IS THERE (IT CANNOT DO IT THE OTHER WAY AROUND AS THE LCD NEEDS TO BE INITIALIZED 
1849   06D5             ;BEFORE IT WILL RESPOND INTELLIGENTLY). IF THE LCD IS FITTED THEN THE ROUTINE WILL READ 
1850   06D5             ;IN AN ASCII SPACE CHARACTER (20H) OR IF THE LCD IS NOT, JUNK FROM THE DATA BUSS.
1851   06D5             ;20H IS SUBTRACTED FROM WHATEVER IS READ IN AND THE RESULT IS STORED IN THE LCD ENABLE 
1852   06D5             ;BUFFER. IF THE RESULT IS ZERO THEN THE LCD IS ENABLED. IT IS VITAL TO KNOW IF THE LCD IS 
1853   06D5             ;FITTED, OTHERWISE THE ROUTINE WHICH READS THE BUSY FLAG MAY LOOP FOREVER.
1854   06D5             
1855   06D5 21 B5 07    L06D5:  LD HL,L07B5    ;POINT HL TO LCD INITIALIZE TABLE 
1856   06D8 01 04 04           LD BC,$0404    ;B=4 BYTES, C=PORT 4
1857   06DB 11 00 05    L06DB:  LD DE,0500H     ;DELAY BETWEEN
1858   06DE 1B          L06DE:  DEC DE          ;EACH BYTE
1859   06DF 7A                 LD A,D          ;AS PER
1860   06E0 B3                 OR E            ;LCD MANUFACTER'S
1861   06E1 20 FB              JR NZ,L06DE     ;INSTRUCTIONS
1862   06E3 ED A3              OUTI            ;OUTPUT (HL) TO (C). HL=HL=1,B=B-1 
1863   06E5 20 F4              JR NZ,L06DB     ;JUMP IF B NOT 0
1864   06E7 10 FE       L06E7:  DJNZ L06E7      ;SHORT DELAY
1865   06E9 DB 84              IN A,(LCDDATA)  ;INPUT FROM LCD TO SEE IF IT'S THERE 
1866   06EB D6 20              SUB $20        ;SUBTRACT ASCII SPACE, IF LCD FITTED 
1867   06ED 32 21 08           LD (L0821),A    ;RESULT WILL BE ZERO: STORE THIS IN 
1868   06F0 C9                 RET             ;LCD MASK: DONE
1869   06F1 FF                 RST 38H         ;
1870   06F2 FF                 RST 38H         ;
1871   06F3 FF                 RST 38H         ;
1872   06F4 FF                 RST 38H         ;
1873   06F5 FF                 RST 38H         ;
1874   06F6 FF                 RST 38H         ;
1875   06F7 FF                 RST 38H         ;
1876   06F8 FF                 RST 38H         ;
1877   06F9 FF                 RST 38H         ;
1878   06FA FF                 RST 38H         ;
1879   06FB FF                 RST 38H         ;
1880   06FC FF                 RST 38H         ;
1881   06FD FF                 RST 38H         ;
1882   06FE FF                 RST 38H         ;
1883   06FF FF                 RST 38H         ;
1884   0700             ;
1885   0700             ;AT 0700 IS THE TAPE'S MENU JUMP TABLE.
1886   0700             ;
1887   0700             ;       .ORG   $0700
1888   0700 C3 3F 04           JP    L043F         ;HIGH SPEED SAVE
1889   0703 C3 3F 04           JP    L043F         ;LOW SPEED SAVE
1890   0706 C3 3B 04           JP    L043B         ;TEST BLOCK
1891   0709 C3 37 04           JP    L0437         ;TEST CHECKSUM
1892   070C C3 26 04           JP    L0426         ;LOAD TAPE
1893   070F             
1894   070F             ;BELOW ARE THE JMON DEFAULT RESET VARIABLES (A ZERO IS THE ACTIVE                           RAM 
1895   070F             ;STATE UNLESS OTHERWISE STATED).                                                           LOCATION
1896   070F             ;
1897   070F 00          L070F: .BYTE     $00         ;KEY BUFFER                                                0820
1898   0710 00                 .BYTE     $00         ;LCD ON/OFF FLAG                                           0821*
1899   0711 00                 .BYTE     $00         ;SOUND ON/OFF                                              0822*
1900   0712 FF                 .BYTE     $FF         ;GO AT ALTERNATE GO ADDRESS IF AA                          0823*
1901   0713 FF                 .BYTE     $FF         ;STEPPER KEY CONTROL/TIMER                                 0824 
1902   0714 00                 .BYTE     $00         ;KEY PRESSED FLAG                                          0825
1903   0715 FF                 .BYTE     $FF         ;UNUSED                                                    0826
1904   0716 00                 .BYTE     $00         ;AUTO INCREMENT ON/OFF                                     0827*
1905   0717 00 0A              .BYTE     $00,$0A    ;ALT GO ADDR/SOFT RESET EDIT LOCATION                      0828*
1906   0719 70                 .BYTE     $70         ;AUTO KEY REPEAT TIMER                                     082A
1907   071A 00                 .BYTE     $00         ;MONITOR CONTROL BYTE                                      082B
1908   071B 00 08              .WORD     L0800        ;DISPLAY BUFFER ADDRESS                                    082C*
1909   071D 00 09              .WORD     L0900        ;INITIAL EDITING LOCATION (CEL)                            082E
1910   071F             ;
1911   071F             ;BELOW ARE THE JMON INDIRECT JUMP ADDRESSES. THIS TABLE IS SHIFTED
1912   071F             ;DOWN TO 0830 ON A HARD RESET.
1913   071F             ;
1914   071F C3 D5 01    L071F: JP    L01D5         ;CONVERT HL TO DISPLAY CODE                               0830
1915   0722 C3 DA 01           JP    L01DA         ;CONVERT A TO DISPLAY CODE                                0833
1916   0725 C3 BA 01           JP    L01BA         ;LED SCAN ROUTINE                                         0836
1917   0728 C3 EE 01           JP    L01EE         ;SET LED DOTS                                             0839
1918   072B C3 24 02           JP    L0224         ;RESET TONES                                              083C
1919   072E C3 27 02           JP    L0227         ;TONE                                                     083F
1920   0731 C3 81 01           JP    L0181         ;SCAN/KEY/LCD/PATCH LOOP                                  0842
1921   0734 C3 B2 00           JP    L00B2         ;SOFT JMON ENTRY                                          0845
1922   0737 C3 3C 02           JP    L023C         ;LCD ROUTINE                                              0848
1923   073A             ;
1924   073A             ;BELOW ARE THE DISPLAY TABLES FOR THE TAPE'S MENU ADDRESS DISPLAYS AND 
1925   073A             ;THE "ERR-IN" DISPLAY THAT IS SUPERIMPOSED OVER THE PERIMETER HANDLER.
1926   073A             ;
1927   073A A7 6F EA C7 L073A: .BYTE   $A7,$6F,$EA,$C7 ;"SAVE" 
1928   073E A7 6F EA C7        .BYTE   $A7,$6F,$EA,$C7 ;"SAVE" 
1929   0742 C6 C7 A7 C6        .BYTE   $C6,$C7,$A7,$C6 ;"TEST" 
1930   0746 C6 C7 A7 C6        .BYTE   $C6,$C7,$A7,$C6 ;"TEST" 
1931   074A C2 EB 6F EC        .BYTE   $C2,$EB,$6F,$EC ;"LOAD" 
1932   074E 04 C7 64 EC        .BYTE   $04,$C7,$64,$EC ;"-End" 
1933   0752 04 C7 44 44 L0752: .BYTE   $04,$C7,$44,$44,$28,$64 ;"-Err In"
1933   0756 28 64 
1934   0758 4F 6F A7 A7        .BYTE   $4F,$6F,$A7,$A7 ;"PASS"
1935   075C 47 6F 28 C2 L075C: .BYTE   $47,$6F,$28,$C2 ;"FAIL"
1936   0760             ;
1937   0760             ;BELOW ARE THE TAPE'S MENU DATA DISPLAYS.
1938   0760             ;
1939   0760 04 6E       L0760: .BYTE  $04,$6E                 ;"-H"
1940   0762 04 C2              .BYTE  $04,$C2                 ;"-L"
1941   0764 E6 C2              .BYTE  $E6,$C2                 ;"bL"
1942   0766 C3 A7              .BYTE  $C3,$A7                 ;"CS"
1943   0768 04 C6       L0768: .BYTE  $04,$C6                 ;"-t"
1944   076A 04 A7              .BYTE  $04,$A7                 ;"-S"
1945   076C C6 E6              .BYTE  $C6,$E6                 ;"tb"
1946   076E C3 A7              .BYTE  $C3,$A7                 ;"CS"
1947   0770 C2 EC              .BYTE  $C2,$EC                 ;"Ld"
1948   0772 FF FF FF FF        .BYTE  $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;(UNUSED)
1948   0776 FF FF FF FF 
1948   077A FF FF 
1949   077C             ;
1950   077C             ; * DENOTES CONTROL BYTES DESIGNED TO BE USER ALTERED (IN RAM).
1951   077C             ;
1952   077C             ;BELOW IS THE PERIMETER HANDLER COMMAND STRING FOR THE TAPE SOFTWARE.
1953   077C             ;
1954   077C 00 FF C6 07 L077C:  .BYTE $00,$FF,$C6,$07,$99,$08,$00,$03      ;(FF FF; THE JUMP ADDRESS FOR THE TAPE 
1954   0780 99 08 00 03 
1955   0784                                                                     ;ROUTINES IS SUPPLIED BY THE POST MENU SET-UP ROUTINES, SEE 0426-044E).
1956   0784 FF FF FF FF L0786:  .BYTE  $FF,$FF,$FF,$FF,$FF                    ;(RESERVED FOR COMMAND STRING EXPANSION). 
1956   0788 FF 
1957   0789             ;
1958   0789             ;BELOW IS THE TAPE'S MENU DRIVER COMMAND STRING.
1959   0789             ;
1960   0789 FF FF 00 04 L0789:   .BYTE  $FF,$FF,$00,$04,$00,$07,$3A,$07,$60,$07
1960   078D 00 07 3A 07 
1960   0791 60 07 
1961   0793             ;
1962   0793             ;TAPE'S SOFTWARE MENU DATA KEY HANDLER ROUTINE JUMP VECTOR 
1963   0793             ;(A RETURN INSTRUCTION).
1964   0793             ;
1965   0793 C9          L0793:  .BYTE  $C9
1966   0794             ;
1967   0794             ;BELOW IS THE STEPPERS DATA DISPLAY CODES.
1968   0794             ;
1969   0794 4F C3       L0794: .BYTE  $4F,$C3           ;"PC"
1970   0796 6F 47              .BYTE  $6F,$47           ;"AF"
1971   0798 E6 C3              .BYTE  $E6,$C3           ;"BC"
1972   079A EC C7              .BYTE  $EC,$C7           ;"DE"
1973   079C 6E C2              .BYTE  $6E,$C2           ;"HL"
1974   079E 28 6E              .BYTE  $28,$6E           ;"IX"
1975   07A0 28 AE              .BYTE  $28,$AE           ;"IY"
1976   07A2 7F 57              .BYTE  $7F,$57           ;“AF'"
1977   07A4 F6 D3              .BYTE  $F6,$D3           ;"BC'"
1978   07A6 FC D7              .BYTE  $FC,$D7           ;"DE'"
1979   07A8 7E D2              .BYTE  $7E,$D2           ;"HL'"
1980   07AA A7 4F              .BYTE  $A7,$4F           ;"SP"
1981   07AC FF                 .BYTE  $FF               ;(UNUSED)
1982   07AD             ;
1983   07AD             ;START OF STAGGERED TABLE OF JMON MODE WORDS FOR LCD
1984   07AD             ;
1985   07AD 44 61 74 61 L07AD:  .BYTE $44,$61,$74,$61 ;"Data"   
1986   07B1 41 64 64 72 L07B1:  .BYTE $41,$64,$64,$72 ;"Addr"
1987   07B5             ;
1988   07B5             ;LCD INITIALIZATION CODES
1989   07B5             ;
1990   07B5 38 01 06 0C L07B5: .BYTE  $38,$01,$06,$0C
1991   07B9             ;
1992   07B9             ;THE REST OF THE JMON MODE WORD TABLE FOR LCD 
1993   07B9             ;
1994   07B9 46 73 2D    L07B9: .BYTE $46,$73,$2D  ;"Fs-"
1995   07BC FF                 .BYTE $FF            ;(UNUSED)
1996   07BD             ;
1997   07BD             ;ADDRESS TABLE OF THE LCD PROMPT LOCATIONS. 
1998   07BD             ;
1999   07BD 84 87 8A 8D L07BD: .BYTE  $84,$87,$8A,$8D,$C4,$C7,$CA,$CD,$80
1999   07C1 C4 C7 CA CD 
1999   07C5 80 
2000   07C6             ;
2001   07C6             ;TAPE'S PERIMETER HANDLER DATA DISPLAYS
2002   07C6             ;
2003   07C6 04 47       L07C6: .BYTE $04,$47       ;"-F"
2004   07C8 04 A7              .BYTE $04,$A7       ;"-S"
2005   07CA 04 C7              .BYTE $04,$C7       ;"-E"
2006   07CC 04 E3              .BYTE $04,$E3       ;"-G"
2007   07CE FF FF              .BYTE $FF,$FF       ;(UNUSED)
2008   07D0             ;
2009   07D0             ;BELOW ARE THE DISPLAY CODE EQUIVALENTS OF THE HEX DIGITS 
2010   07D0             ;0 TO F LISTED IN ASCENDING ORDER.
2011   07D0             ;
2012   07D0 EB 28 CD AD L07D0: .BYTE $EB,$28,$CD,$AD ;0,1,2,3
2013   07D4 2E A7 E7 29        .BYTE $2E,$A7,$E7,$29 ;4,5,6,7
2014   07D8 EF 2F 6F E6        .BYTE $EF,$2F,$6F,$E6 ;8,9,A,B
2015   07DC C3 EC C7 47        .BYTE $C3,$EC,$C7,$47 ;C,D,E,F
2016   07E0             ;
2017   07E0             ;FINALLY AT 07E0 IS THE FUNCTION-1 AND SHIFT JUMP ADDRESSES.
2018   07E0             ;
2019   07E0 D2 03       L07E0: .WORD   L03D2            ;MENU DRIVER
2020   07E2 E3 02              .WORD   L02E3
2021   07E4 5E 00              .WORD   L005E
2022   07E6 FF FF              .WORD   $FFFF
2023   07E8 D3 02              .WORD   L02D3
2024   07EA AE 00              .WORD   L00AE
2025   07EC DE 02              .WORD   L02DE
2026   07EE 41 03              .WORD   L0341
2027   07F0 ED 02              .WORD   L02ED
2028   07F2 E8 02              .WORD   L02E8
2029   07F4 F2 02              .WORD   L02F2
2030   07F6 FF FF              .WORD   $FFFF
2031   07F8 FF FF              .WORD   $FFFF
2032   07FA FF FF              .WORD   $FFFF
2033   07FC FF FF              .WORD   $FFFF
2034   07FE FF FF              .WORD   $FFFF
2035   0800                    .END
tasm: Number of errors = 0
